(define List (-> this)
(->
    this

    (define ArrayList _{java.util.ArrayList}_ -{ new java.util.ArrayList(); }- _{ java.util.ArrayList }_)

    (define list _{java.util.ArrayList}_ -{ new java.util.ArrayList(); }- _{ java.util.ArrayList }_)

    (define += (_ -> List)
    (element ->
        (-{ list.add(element); }- void)
        (List this)
    ))

    (define get (Int -> _{ java.lang.Object }_)
    ( i ->
         -{ list.get(i.toInt()._hlisp_run()); }- _{ java.lang.Object }_
    ))
))


(define while ((-> Boolean) (->) ->) 
(condition body ->
    -{
        while (condition._hlisp_run()) {
            body._hlisp_run();
        }
    }- void
))


(define Int (_{int}_ -> this) 
(value ->
    (define + (Int -> Int) (other -> Int -{ value + other.value }- _{int}_))
    (define * (Int -> Int) (other -> Int -{ value * other.value }- _{int}_))
    (define ++ (->) (-> ( -{value++;}- void)))
    (define < (Int -> Boolean) (other -> Boolean -{value < other}- _{boolean}_))
    (define toInt (-> _{java.lang.Integer}_) (-> -{ value; }- _{ java.lang.Integer }_))
    (define toString (-> String)
    (->
        (String -{ java.lang.String.valueOf(value) }- _{java.lang.String}_)
    ))
    this
))

(define Boolean (_{boolean}_ -> this) 
(value ->
    (define ! (-> Int) (-> Boolean -{ !value }- _{boolean}_))
    (define toString (-> String) 
    (->
        (String -{ java.lang.Boolean.toString(value) }- _{java.lang.String}_)
    ))
))


(define String (_{java.lang.String}_ -> this) (value ->
    this        

    (define + (String -> String) (other -> (String -{ value + other.value }- _{java.lang.String}_)))
    (define print (->) (-> -{ System.out.print(value); }- void))
    (define println (->) (-> ("this" + "\n") print))
))

(define MyNamespace (-> this) 
(->

    (define HelloWorldClass (-> this) 
    (->
        (define count Int (5))

        (define foo Int 0)
        (define bar Int 3)
        (define bla Int (foo + bar))

        (define run (->)  
        (->
            (("Hello World!" + (count toString)) print)
        ))

        (define function (Int Int -> Int) (a b -> (a + b)) )
    ))

    (define main (Int ->) 
    (param ->
        (define i Int 0)
        (define eval Int (5 + (i * 4)))
        (define error (-> Int) (-> 0))
        (define k List (()) )

        (define list List ( List += "some" += "elements") )
        (define evalFun (-> Int) (-> 5 + (i * 4)))
        
        (define helloClass HelloWorldClass ( () ))

        (while ((-> Boolean) (-> i < param)) 
        ((->) 
        (->
            ("iteration" println)
            (i ++)
        )))

        ((Int Int -> Int) (a b -> a + b))
    ))
))

(MyNamespace main 5)
