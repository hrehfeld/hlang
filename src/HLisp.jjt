options {
  LOOKAHEAD = 1;
  CHOICE_AMBIGUITY_CHECK = 2;
  OTHER_AMBIGUITY_CHECK = 1;
  STATIC = false;
  DEBUG_PARSER = false;
  DEBUG_LOOKAHEAD = false;
  DEBUG_TOKEN_MANAGER = false;
  ERROR_REPORTING = true;
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = true;
  IGNORE_CASE = false;
  USER_TOKEN_MANAGER = false;
  USER_CHAR_STREAM = false;
  BUILD_PARSER = true;
  BUILD_TOKEN_MANAGER = true;
  SANITY_CHECK = true;
  FORCE_LA_CHECK = false;
  
  MULTI = true;
  NODE_CLASS = "AstNode";
  NODE_PREFIX = "Ast";
  NODE_PACKAGE = "de.haukerehfeld.hlisp.parser";
  VISITOR = true;
  VISITOR_EXCEPTION = "de.haukerehfeld.hlisp.semantics.SemanticException";
  VISITOR_DATA_TYPE = "de.haukerehfeld.hlisp.semantics.Value";
  VISITOR_RETURN_TYPE = "Object";
  TRACK_TOKENS = true;
}

PARSER_BEGIN(HLispParser)
package de.haukerehfeld.hlisp.parser;

public class HLispParser {}

PARSER_END(HLispParser)

SKIP: { " " | "\t"  | "\r" | "\n"}

TOKEN:
{
  <DEFINE: "define" >
  | <INSTANTIATE: "make" >


  | < FUNCTION: "->">
  | < BRACKETOPEN: "(" >
  | < BRACKETCLOSED: ")" >

  | < IDENTIFIER: (["-", "_", "=", ":", "<", ">", "[", "]", "+", "*", "/", "\\",
                   "A"-"Z", "a"-"z"])+ >

  | < INTEGER: ( <DECIMAL> )+ >

  | <STRING: "\"" (~["\""])* "\"" >


  | < FLOAT: <FLOATED> | ("-")? (<DECIMAL>)+ (<FLOATED>)? >
  | < #FLOATED: "." (<DECIMAL>)+ >

  | < DECIMAL: ["0"-"9"] >
}

TOKEN: {
  <NATIVE_CODE_START: "_{" (" ")? >: NATIVE_CODE
}
<NATIVE_CODE> TOKEN : {
  <NATIVE_CODE_END: (" ")? "}_" >: DEFAULT
}
<NATIVE_CODE> SPECIAL_TOKEN: {
  <NATIVE_CODE_BLOCK: (~["}"] | "}" ~["_"])+ >
}

TOKEN: {
  <COMMENT_START: "#" >: COMMENT
}
<COMMENT> SPECIAL_TOKEN: {
  <COMMENT_END: "\n"> : DEFAULT
}

/** Main production. */
AstRoot Start() #Root: {}
{
  ( (Expression())+ <EOF>)
  { return jjtThis; }
}
 
void Expression() #void:
{}
{
  LOOKAHEAD(2) Define() 
  | LOOKAHEAD(10) ListStart() LambdaExpression() ListEnd()
  | Literal()
  | Identifier() 
  | List() #List
  | NativeCodeBlock()
}

void Identifier() : { Token t; } { 
  t=<IDENTIFIER> { jjtThis.jjtSetValue(t.image); }
}


void NativeCodeBlock(): { Token t; } {
  // native code block is a SPECIAL_TOKEN, so we need to get it from NATIVE_CODE_END
  <NATIVE_CODE_START> t=<NATIVE_CODE_END>
    { jjtThis.jjtSetValue(t.specialToken.image); }
}

void Define() : {} { 
  ListStart()
    <DEFINE>
    Identifier() //name
    (LambdaExpression() | Variable())
  ListEnd()
}

void LambdaExpression(): {} {
  FunctionType() ListStart() FunctionParameters() Body() ListEnd()
}
void Variable(): {} {
  (TypeIdentifier() | QualifiedType()) VariableBody()
}

void TypeIdentifier() #SimpleType: {} { ( NativeCodeBlock() | Identifier()) }
void Type(): {} { 
    TypeIdentifier()
    | LOOKAHEAD(3) FunctionType()
    | LOOKAHEAD(3) QualifiedType()
}
void QualifiedType(): {} { ListStart() Identifier() (Identifier())+ ListEnd() }
void FunctionType(): {} { ListStart() (Type())* [FunctionSymbol() [Type()]] ListEnd() }

void VariableBody() #Body: {} { Expression() }

void Body(): {} {
  (Expression())*
}
void FunctionParameters(): {} { (Identifier())* FunctionSymbol() }


void Literal() #void: {} { Float() | String() | Integer() }

void Float(): { Token t; }{ t=<FLOAT> { jjtThis.jjtSetValue(t.image); jjtThis.setPosition(t); }}
void String(): { Token t; } { t=<STRING> { jjtThis.jjtSetValue(t.image); jjtThis.setPosition(t); }}
void Integer(): { Token t; } { t=<INTEGER> { jjtThis.jjtSetValue(t.image); jjtThis.setPosition(t); }}

void ListStart() #void: {} { <BRACKETOPEN> }
void ListEnd() #void: {} { <BRACKETCLOSED> }
/**
 * A general List, doesn't create node, create  it yourself
 */
void List() #void: {} { ListStart() ( Expression() )*  ListEnd() }

void FunctionSymbol(): {} { <FUNCTION> }

