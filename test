Buildfile: build.xml

compile:
     [copy] Copying 2 files to V:\Programming\lisp\tmp
   [javacc] Java Compiler Compiler Version 5.0 (Parser Generator)
   [javacc] (type "javacc" with no arguments for help)
   [javacc] Reading from file V:\Programming\lisp\tmp\de\haukerehfeld\hlisp\parser\HLisp.jj . . .
   [javacc] Note: UNICODE_INPUT option is specified. Please make sure you create the parser/lexer using a Reader with the correct character encoding.
   [javacc] File "TokenMgrError.java" is being rebuilt.
   [javacc] File "ParseException.java" is being rebuilt.
   [javacc] File "Token.java" is being rebuilt.
   [javacc] File "SimpleCharStream.java" is being rebuilt.
   [javacc] Parser generated with 0 errors and 1 warnings.
    [javac] Compiling 9 source files to V:\Programming\lisp\bin

run:
     [java] AstRoot
     [java]  AstDefine
     [java]   AstIdentifier = 'List'
     [java]   AstLambdaExpression
     [java]    AstFunctionType
     [java]     AstFunctionSymbol
     [java]     AstType
     [java]      AstSimpleType
     [java]       AstIdentifier = 'this'
     [java]    AstFunctionParameters
     [java]     AstFunctionSymbol
     [java]    AstBody
     [java]     AstIdentifier = 'this'
     [java]     AstDefine
     [java]      AstIdentifier = 'ArrayList'
     [java]      AstVariable
     [java]       AstSimpleType
     [java]        AstNativeType = 'java.util.ArrayList'
     [java]       AstBody
     [java]        AstNativeCodeBlock = 'new java.util.ArrayList(); '
     [java]         AstType
     [java]          AstSimpleType
     [java]           AstIdentifier = 'this'
     [java]     AstDefine
     [java]      AstIdentifier = 'list'
     [java]      AstVariable
     [java]       AstSimpleType
     [java]        AstNativeType = 'java.util.ArrayList'
     [java]       AstBody
     [java]        AstNativeCodeBlock = 'new java.util.ArrayList(); '
     [java]         AstType
     [java]          AstSimpleType
     [java]           AstNativeType = 'java.util.ArrayList'
     [java]     AstDefine
     [java]      AstIdentifier = '+='
     [java]      AstLambdaExpression
     [java]       AstFunctionType
     [java]        AstType
     [java]         AstSimpleType
     [java]          AstIdentifier = '_'
     [java]        AstFunctionSymbol
     [java]        AstType
     [java]         AstSimpleType
     [java]          AstIdentifier = 'List'
     [java]       AstFunctionParameters
     [java]        AstIdentifier = 'element'
     [java]        AstFunctionSymbol
     [java]       AstBody
     [java]        AstList
     [java]         AstNativeCodeBlock = 'list.add(element); '
     [java]          AstType
     [java]           AstSimpleType
     [java]            AstIdentifier = 'void'
     [java]        AstIdentifier = 'this'
     [java]     AstDefine
     [java]      AstIdentifier = 'get'
     [java]      AstLambdaExpression
     [java]       AstFunctionType
     [java]        AstType
     [java]         AstSimpleType
     [java]          AstIdentifier = 'Int'
     [java]        AstFunctionSymbol
     [java]        AstType
     [java]         AstSimpleType
     [java]          AstNativeType = 'java.lang.Object'
     [java]       AstFunctionParameters
     [java]        AstIdentifier = 'i'
     [java]        AstFunctionSymbol
     [java]       AstBody
     [java]        AstNativeCodeBlock = 'list.get(i.toInt()._hlisp_run()); '
     [java]         AstType
     [java]          AstSimpleType
     [java]           AstNativeType = 'java.lang.Object'
     [java]  AstDefine
     [java]   AstIdentifier = 'while'
     [java]   AstLambdaExpression
     [java]    AstFunctionType
     [java]     AstType
     [java]      AstFunctionType
     [java]       AstFunctionSymbol
     [java]       AstType
     [java]        AstSimpleType
     [java]         AstIdentifier = 'Boolean'
     [java]     AstType
     [java]      AstFunctionType
     [java]       AstFunctionSymbol
     [java]     AstFunctionSymbol
     [java]    AstFunctionParameters
     [java]     AstIdentifier = 'condition'
     [java]     AstIdentifier = 'body'
     [java]     AstFunctionSymbol
     [java]    AstBody
     [java]     AstNativeCodeBlock = '
     [java]         while (condition._hlisp_run()) {
     [java]             body._hlisp_run();
     [java]         }
     [java]     '
     [java]      AstType
     [java]       AstSimpleType
     [java]        AstIdentifier = 'void'
     [java]  AstDefine
     [java]   AstIdentifier = 'Int'
     [java]   AstLambdaExpression
     [java]    AstFunctionType
     [java]     AstType
     [java]      AstSimpleType
     [java]       AstNativeType = 'int'
     [java]     AstFunctionSymbol
     [java]     AstType
     [java]      AstSimpleType
     [java]       AstIdentifier = 'this'
     [java]    AstFunctionParameters
     [java]     AstIdentifier = 'value'
     [java]     AstFunctionSymbol
     [java]    AstBody
     [java]     AstDefine
     [java]      AstIdentifier = '+'
     [java]      AstLambdaExpression
     [java]       AstFunctionType
     [java]        AstType
     [java]         AstSimpleType
     [java]          AstIdentifier = 'Int'
     [java]        AstFunctionSymbol
     [java]        AstType
     [java]         AstSimpleType
     [java]          AstIdentifier = 'Int'
     [java]       AstFunctionParameters
     [java]        AstIdentifier = 'other'
     [java]        AstFunctionSymbol
     [java]       AstBody
     [java]        AstIdentifier = 'Int'
     [java]        AstNativeCodeBlock = 'value + other.value '
     [java]         AstType
     [java]          AstSimpleType
     [java]           AstNativeType = 'int'
     [java]     AstDefine
     [java]      AstIdentifier = '*'
     [java]      AstLambdaExpression
     [java]       AstFunctionType
     [java]        AstType
     [java]         AstSimpleType
     [java]          AstIdentifier = 'Int'
     [java]        AstFunctionSymbol
     [java]        AstType
     [java]         AstSimpleType
     [java]          AstIdentifier = 'Int'
     [java]       AstFunctionParameters
     [java]        AstIdentifier = 'other'
     [java]        AstFunctionSymbol
     [java]       AstBody
     [java]        AstIdentifier = 'Int'
     [java]        AstNativeCodeBlock = 'value * other.value '
     [java]         AstType
     [java]          AstSimpleType
     [java]           AstNativeType = 'int'
     [java]     AstDefine
     [java]      AstIdentifier = '++'
     [java]      AstLambdaExpression
     [java]       AstFunctionType
     [java]        AstFunctionSymbol
     [java]       AstFunctionParameters
     [java]        AstFunctionSymbol
     [java]       AstBody
     [java]        AstList
     [java]         AstNativeCodeBlock = 'value++;'
     [java]          AstType
     [java]           AstSimpleType
     [java]            AstIdentifier = 'void'
     [java]     AstDefine
     [java]      AstIdentifier = '<'
     [java]      AstLambdaExpression
     [java]       AstFunctionType
     [java]        AstType
     [java]         AstSimpleType
     [java]          AstIdentifier = 'Int'
     [java]        AstFunctionSymbol
     [java]        AstType
     [java]         AstSimpleType
     [java]          AstIdentifier = 'Boolean'
     [java]       AstFunctionParameters
     [java]        AstIdentifier = 'other'
     [java]        AstFunctionSymbol
     [java]       AstBody
     [java]        AstIdentifier = 'Boolean'
     [java]        AstNativeCodeBlock = 'value < other'
     [java]         AstType
     [java]          AstSimpleType
     [java]           AstNativeType = 'boolean'
     [java]     AstDefine
     [java]      AstIdentifier = 'toInt'
     [java]      AstLambdaExpression
     [java]       AstFunctionType
     [java]        AstFunctionSymbol
     [java]        AstType
     [java]         AstSimpleType
     [java]          AstNativeType = 'java.lang.Integer'
     [java]       AstFunctionParameters
     [java]        AstFunctionSymbol
     [java]       AstBody
     [java]        AstNativeCodeBlock = 'value; '
     [java]         AstType
     [java]          AstSimpleType
     [java]           AstNativeType = 'java.lang.Integer'
     [java]     AstDefine
     [java]      AstIdentifier = 'toString'
     [java]      AstLambdaExpression
     [java]       AstFunctionType
     [java]        AstFunctionSymbol
     [java]        AstType
     [java]         AstSimpleType
     [java]          AstIdentifier = 'String'
     [java]       AstFunctionParameters
     [java]        AstFunctionSymbol
     [java]       AstBody
     [java]        AstList
     [java]         AstIdentifier = 'String'
     [java]         AstNativeCodeBlock = 'java.lang.String.valueOf(value) '
     [java]          AstType
     [java]           AstSimpleType
     [java]            AstNativeType = 'java.lang.String'
     [java]     AstIdentifier = 'this'
     [java]  AstDefine
     [java]   AstIdentifier = 'Boolean'
     [java]   AstLambdaExpression
     [java]    AstFunctionType
     [java]     AstType
     [java]      AstSimpleType
     [java]       AstNativeType = 'boolean'
     [java]     AstFunctionSymbol
     [java]     AstType
     [java]      AstSimpleType
     [java]       AstIdentifier = 'this'
     [java]    AstFunctionParameters
     [java]     AstIdentifier = 'value'
     [java]     AstFunctionSymbol
     [java]    AstBody
     [java]     AstDefine
     [java]      AstIdentifier = '!'
     [java]      AstLambdaExpression
     [java]       AstFunctionType
     [java]        AstFunctionSymbol
     [java]        AstType
     [java]         AstSimpleType
     [java]          AstIdentifier = 'Int'
     [java]       AstFunctionParameters
     [java]        AstFunctionSymbol
     [java]       AstBody
     [java]        AstIdentifier = 'Boolean'
     [java]        AstNativeCodeBlock = '!value '
     [java]         AstType
     [java]          AstSimpleType
     [java]           AstNativeType = 'boolean'
     [java]     AstDefine
     [java]      AstIdentifier = 'toString'
     [java]      AstLambdaExpression
     [java]       AstFunctionType
     [java]        AstFunctionSymbol
     [java]        AstType
     [java]         AstSimpleType
     [java]          AstIdentifier = 'String'
     [java]       AstFunctionParameters
     [java]        AstFunctionSymbol
     [java]       AstBody
     [java]        AstList
     [java]         AstIdentifier = 'String'
     [java]         AstNativeCodeBlock = 'java.lang.Boolean.toString(value) '
     [java]          AstType
     [java]           AstSimpleType
     [java]            AstNativeType = 'java.lang.String'
     [java]  AstDefine
     [java]   AstIdentifier = 'String'
     [java]   AstLambdaExpression
     [java]    AstFunctionType
     [java]     AstType
     [java]      AstSimpleType
     [java]       AstNativeType = 'java.lang.String'
     [java]     AstFunctionSymbol
     [java]     AstType
     [java]      AstSimpleType
     [java]       AstIdentifier = 'this'
     [java]    AstFunctionParameters
     [java]     AstIdentifier = 'value'
     [java]     AstFunctionSymbol
     [java]    AstBody
     [java]     AstIdentifier = 'this'
     [java]     AstDefine
     [java]      AstIdentifier = '+'
     [java]      AstLambdaExpression
     [java]       AstFunctionType
     [java]        AstType
     [java]         AstSimpleType
     [java]          AstIdentifier = 'String'
     [java]        AstFunctionSymbol
     [java]        AstType
     [java]         AstSimpleType
     [java]          AstIdentifier = 'String'
     [java]       AstFunctionParameters
     [java]        AstIdentifier = 'other'
     [java]        AstFunctionSymbol
     [java]       AstBody
     [java]        AstList
     [java]         AstIdentifier = 'String'
     [java]         AstNativeCodeBlock = 'value + other.value '
     [java]          AstType
     [java]           AstSimpleType
     [java]            AstNativeType = 'java.lang.String'
     [java]     AstDefine
     [java]      AstIdentifier = 'print'
     [java]      AstLambdaExpression
     [java]       AstFunctionType
     [java]        AstFunctionSymbol
     [java]       AstFunctionParameters
     [java]        AstFunctionSymbol
     [java]       AstBody
     [java]        AstNativeCodeBlock = 'System.out.print(value); '
     [java]         AstType
     [java]          AstSimpleType
     [java]           AstIdentifier = 'void'
     [java]     AstDefine
     [java]      AstIdentifier = 'println'
     [java]      AstLambdaExpression
     [java]       AstFunctionType
     [java]        AstFunctionSymbol
     [java]       AstFunctionParameters
     [java]        AstFunctionSymbol
     [java]       AstBody
     [java]        AstList
     [java]         AstString = '"this"'
     [java]         AstIdentifier = '+'
     [java]         AstString = '"\n"'
     [java]        AstIdentifier = 'print'
     [java]  AstDefine
     [java]   AstIdentifier = 'MyNamespace'
     [java]   AstLambdaExpression
     [java]    AstFunctionType
     [java]     AstFunctionSymbol
     [java]     AstType
     [java]      AstSimpleType
     [java]       AstIdentifier = 'this'
     [java]    AstFunctionParameters
     [java]     AstFunctionSymbol
     [java]    AstBody
     [java]     AstDefine
     [java]      AstIdentifier = 'HelloWorldClass'
     [java]      AstLambdaExpression
     [java]       AstFunctionType
     [java]        AstFunctionSymbol
     [java]        AstType
     [java]         AstSimpleType
     [java]          AstIdentifier = 'this'
     [java]       AstFunctionParameters
     [java]        AstFunctionSymbol
     [java]       AstBody
     [java]        AstDefine
     [java]         AstIdentifier = 'count'
     [java]         AstVariable
     [java]          AstSimpleType
     [java]           AstIdentifier = 'Int'
     [java]          AstBody
     [java]           AstList
     [java]            AstInteger = '5'
     [java]        AstDefine
     [java]         AstIdentifier = 'foo'
     [java]         AstVariable
     [java]          AstSimpleType
     [java]           AstIdentifier = 'Int'
     [java]          AstBody
     [java]           AstInteger = '0'
     [java]        AstDefine
     [java]         AstIdentifier = 'bar'
     [java]         AstVariable
     [java]          AstSimpleType
     [java]           AstIdentifier = 'Int'
     [java]          AstBody
     [java]           AstInteger = '3'
     [java]        AstDefine
     [java]         AstIdentifier = 'bla'
     [java]         AstVariable
     [java]          AstSimpleType
     [java]           AstIdentifier = 'Int'
     [java]          AstBody
     [java]           AstList
     [java]            AstIdentifier = 'foo'
     [java]            AstIdentifier = '+'
     [java]            AstIdentifier = 'bar'
     [java]        AstDefine
     [java]         AstIdentifier = 'run'
     [java]         AstLambdaExpression
     [java]          AstFunctionType
     [java]           AstFunctionSymbol
     [java]          AstFunctionParameters
     [java]           AstFunctionSymbol
     [java]          AstBody
     [java]           AstList
     [java]            AstList
     [java]             AstString = '"Hello World!"'
     [java]             AstIdentifier = '+'
     [java]             AstList
     [java]              AstIdentifier = 'count'
     [java]              AstIdentifier = 'toString'
     [java]            AstIdentifier = 'print'
     [java]        AstDefine
     [java]         AstIdentifier = 'function'
     [java]         AstLambdaExpression
     [java]          AstFunctionType
     [java]           AstType
     [java]            AstSimpleType
     [java]             AstIdentifier = 'Int'
     [java]           AstType
     [java]            AstSimpleType
     [java]             AstIdentifier = 'Int'
     [java]           AstFunctionSymbol
     [java]           AstType
     [java]            AstSimpleType
     [java]             AstIdentifier = 'Int'
     [java]          AstFunctionParameters
     [java]           AstIdentifier = 'a'
     [java]           AstIdentifier = 'b'
     [java]           AstFunctionSymbol
     [java]          AstBody
     [java]           AstList
     [java]            AstIdentifier = 'a'
     [java]            AstIdentifier = '+'
     [java]            AstIdentifier = 'b'
     [java]     AstDefine
     [java]      AstIdentifier = 'main'
     [java]      AstLambdaExpression
     [java]       AstFunctionType
     [java]        AstType
     [java]         AstSimpleType
     [java]          AstIdentifier = 'Int'
     [java]        AstFunctionSymbol
     [java]       AstFunctionParameters
     [java]        AstIdentifier = 'param'
     [java]        AstFunctionSymbol
     [java]       AstBody
     [java]        AstDefine
     [java]         AstIdentifier = 'i'
     [java]         AstVariable
     [java]          AstSimpleType
     [java]           AstIdentifier = 'Int'
     [java]          AstBody
     [java]           AstInteger = '0'
     [java]        AstDefine
     [java]         AstIdentifier = 'eval'
     [java]         AstVariable
     [java]          AstSimpleType
     [java]           AstIdentifier = 'Int'
     [java]          AstBody
     [java]           AstList
     [java]            AstInteger = '5'
     [java]            AstIdentifier = '+'
     [java]            AstList
     [java]             AstIdentifier = 'i'
     [java]             AstIdentifier = '*'
     [java]             AstInteger = '4'
     [java]        AstDefine
     [java]         AstIdentifier = 'error'
     [java]         AstLambdaExpression
     [java]          AstFunctionType
     [java]           AstFunctionSymbol
     [java]           AstType
     [java]            AstSimpleType
     [java]             AstIdentifier = 'Int'
     [java]          AstFunctionParameters
     [java]           AstFunctionSymbol
     [java]          AstBody
     [java]           AstInteger = '0'
     [java]        AstDefine
     [java]         AstIdentifier = 'k'
     [java]         AstVariable
     [java]          AstSimpleType
     [java]           AstIdentifier = 'List'
     [java]          AstBody
     [java]           AstList
     [java]            AstList
     [java]        AstDefine
     [java]         AstIdentifier = 'list'
     [java]         AstVariable
     [java]          AstSimpleType
     [java]           AstIdentifier = 'List'
     [java]          AstBody
     [java]           AstList
     [java]            AstIdentifier = 'List'
     [java]            AstIdentifier = '+='
     [java]            AstString = '"some"'
     [java]            AstIdentifier = '+='
     [java]            AstString = '"elements"'
     [java]        AstDefine
     [java]         AstIdentifier = 'evalFun'
     [java]         AstLambdaExpression
     [java]          AstFunctionType
     [java]           AstFunctionSymbol
     [java]           AstType
     [java]            AstSimpleType
     [java]             AstIdentifier = 'Int'
     [java]          AstFunctionParameters
     [java]           AstFunctionSymbol
     [java]          AstBody
     [java]           AstInteger = '5'
     [java]           AstIdentifier = '+'
     [java]           AstList
     [java]            AstIdentifier = 'i'
     [java]            AstIdentifier = '*'
     [java]            AstInteger = '4'
     [java]        AstDefine
     [java]         AstIdentifier = 'helloClass'
     [java]         AstVariable
     [java]          AstSimpleType
     [java]           AstIdentifier = 'HelloWorldClass'
     [java]          AstBody
     [java]           AstList
     [java]            AstList
     [java]        AstList
     [java]         AstIdentifier = 'while'
     [java]         AstLambdaExpression
     [java]          AstFunctionType
     [java]           AstFunctionSymbol
     [java]           AstType
     [java]            AstSimpleType
     [java]             AstIdentifier = 'Boolean'
     [java]          AstFunctionParameters
     [java]           AstFunctionSymbol
     [java]          AstBody
     [java]           AstIdentifier = 'i'
     [java]           AstIdentifier = '<'
     [java]           AstIdentifier = 'param'
     [java]         AstLambdaExpression
     [java]          AstFunctionType
     [java]           AstFunctionSymbol
     [java]          AstFunctionParameters
     [java]           AstFunctionSymbol
     [java]          AstBody
     [java]           AstList
     [java]            AstString = '"iteration"'
     [java]            AstIdentifier = 'println'
     [java]           AstList
     [java]            AstIdentifier = 'i'
     [java]            AstIdentifier = '++'
     [java]        AstLambdaExpression
     [java]         AstFunctionType
     [java]          AstType
     [java]           AstSimpleType
     [java]            AstIdentifier = 'Int'
     [java]          AstType
     [java]           AstSimpleType
     [java]            AstIdentifier = 'Int'
     [java]          AstFunctionSymbol
     [java]          AstType
     [java]           AstSimpleType
     [java]            AstIdentifier = 'Int'
     [java]         AstFunctionParameters
     [java]          AstIdentifier = 'a'
     [java]          AstIdentifier = 'b'
     [java]          AstFunctionSymbol
     [java]         AstBody
     [java]          AstIdentifier = 'a'
     [java]          AstIdentifier = '+'
     [java]          AstIdentifier = 'b'
     [java]  AstList
     [java]   AstIdentifier = 'MyNamespace'
     [java]   AstIdentifier = 'main'
     [java]   AstInteger = '5'
     [java] Defining Types...
     [java] BLAAAAAAAAfalse
     [java] defining (ArrayList [ java.util.ArrayList] := -{ new java.util.ArrayList();  }- this) in (( -> this))
     [java] BLAAAAAAAAfalse
     [java] defining (list [ java.util.ArrayList] := -{ new java.util.ArrayList();  }-) in (( -> this))
     [java] defining (+= [(_ -> List)] := List[-{ list.add(element);  }- void, UnresolvedInstruction('this', unresolved)]) in (( -> this))
     [java] defining (get [(Int -> java.lang.Object)] := -{ list.get(i.toInt()._hlisp_run(... }-) in (( -> this))
     [java] defining (List [( -> this)] := UnresolvedInstruction('this', unresolved)) in (Root [ void] := -{ Root.List argList = List();S... }- void)
     [java] defining (while [(( -> Boolean) ( -> void) -> void)] := -{ 
     [java]         while (condition._hl... }- void) in (Root [ void] := -{ Root.List argList = List();S... }- void)defining (+ [(Int -> Int)] := List[UnresolvedInstruction('Int', unresolved), -{ value + other.value  }-]) in ((int -> this))
     [java] defining (* [(Int -> Int)] := List[UnresolvedInstruction('Int', unresolved), -{ value * other.value  }-]) in ((int -> this))
     [java] defining (++ [( -> void)] := -{ value++; }- void) in ((int -> this))
     [java] defining (< [(Int -> Boolean)] := List[UnresolvedInstruction('Boolean', unresolved), -{ value < other }-]) in ((int -> this))
     [java] defining (toInt [( -> java.lang.Integer)] := -{ value;  }-) in ((int -> this))
     [java] defining (toString [( -> String)] := List[UnresolvedInstruction('String', unresolved), -{ java.lang.String.valueOf(value... }-]) in ((int -> this))
     [java] defining (Int [(int -> this)] := UnresolvedInstruction('this', unresolved)) in (Root [ void] := -{ Root.List argList = List();S... }- void)
     [java] defining (! [( -> Int)] := List[UnresolvedInstruction('Boolean', unresolved), -{ !value  }-]) in ((boolean -> this))
     [java] defining (toString [( -> String)] := List[UnresolvedInstruction('String', unresolved), -{ java.lang.Boolean.toString(val... }-]) in ((boolean -> this))
     [java] defining (Boolean [(boolean -> this)] := VoidInstruction) in (Root [ void] := -{ Root.List argList = List();S... }- void)
     [java] defining (+ [(String -> String)] := List[UnresolvedInstruction('String', unresolved), -{ value + other.value  }-]) in ((java.lang.String -> this))
     [java] defining (print [( -> void)] := -{ System.out.print(value);  }- void) in ((java.lang.String -> this))
     [java] defining (println [( -> void)] := List[List[call[null UnresolvedType(String, unresolved)(-{ ""this"" }- String)], UnresolvedInstruction('+', unresolved), call[null UnresolvedType(String, unresolved)(-{ ""\n"" }- String)]], UnresolvedInstruction('print', unresolved)]) in ((java.lang.String -> this))
     [java] defining (String [(java.lang.String -> this)] := UnresolvedInstruction('this', unresolved)) in (Root [ void] := -{ Root.List argList = List();S... }- void)
     [java] BLAAAAAAAAfalse
     [java] defining (count [ Int] := call[null UnresolvedType(Int, unresolved)(-{ 5 }- Int)]) in (( -> this))
     [java] BLAAAAAAAAfalse
     [java] defining (foo [ Int] := call[null UnresolvedType(Int, unresolved)(-{ 0 }- Int)]) in (( -> this))
     [java] BLAAAAAAAAfalse
     [java] defining (bar [ Int] := call[null UnresolvedType(Int, unresolved)(-{ 3 }- Int)]) in (( -> this))
     [java] BLAAAAAAAAfalse
     [java] defining (bla [ Int] := List[UnresolvedInstruction('foo', unresolved), UnresolvedInstruction('+', unresolved), UnresolvedInstruction('bar', unresolved)]) in (( -> this))
     [java] defining (run [( -> void)] := List[List[call[null UnresolvedType(String, unresolved)(-{ ""Hello World!"" }- String)], UnresolvedInstruction('+', unresolved), List[UnresolvedInstruction('count', unresolved), UnresolvedInstruction('toString', unresolved)]], UnresolvedInstruction('print', unresolved)]) in (( -> this))
     [java] defining (function [(Int Int -> Int)] := List[UnresolvedInstruction('a', unresolved), UnresolvedInstruction('+', unresolved), UnresolvedInstruction('b', unresolved)]) in (( -> this))
     [java] defining (HelloWorldClass [( -> this)] := VoidInstruction) in (( -> this))
     [java] BLAAAAAAAAfalse
     [java] defining (i [ Int] := call[null UnresolvedType(Int, unresolved)(-{ 0 }- Int)]) in ((Int -> void))
     [java] BLAAAAAAAAfalse
     [java] defining (eval [ Int] := List[call[null UnresolvedType(Int, unresolved)(-{ 5 }- Int)], UnresolvedInstruction('+', unresolved), List[UnresolvedInstruction('i', unresolved), UnresolvedInstruction('*', unresolved), call[null UnresolvedType(Int, unresolved)(-{ 4 }- Int)]]]) in ((Int -> void))
     [java] defining (error [( -> Int)] := call[null UnresolvedType(Int, unresolved)(-{ 0 }- Int)]) in ((Int -> void))
     [java] BLAAAAAAAAfalse
     [java] defining (k [ List] := VoidInstruction) in ((Int -> void))
     [java] BLAAAAAAAAfalse
     [java] defining (list [ List] := List[UnresolvedInstruction('List', unresolved), UnresolvedInstruction('+=', unresolved), call[null UnresolvedType(String, unresolved)(-{ ""some"" }- String)], UnresolvedInstruction('+=', unresolved), call[null UnresolvedType(String, unresolved)(-{ ""elements"" }- String)]]) in ((Int -> void))
     [java] defining (evalFun [( -> Int)] := List[call[null UnresolvedType(Int, unresolved)(-{ 5 }- Int)], UnresolvedInstruction('+', unresolved), List[UnresolvedInstruction('i', unresolved), UnresolvedInstruction('*', unresolved), call[null UnresolvedType(Int, unresolved)(-{ 4 }- Int)]]]) in ((Int -> void))
     [java] BLAAAAAAAAfalse
     [java] defining (helloClass [ HelloWorldClass] := VoidInstruction) in ((Int -> void))
     [java] defining (main [(Int -> void)] := UnresolvedInstruction('while', unresolved)) in (( -> this))
     [java] defining (MyNamespace [( -> this)] := VoidInstruction) in (Root [ void] := -{ Root.List argList = List();S... }- void)
     [java] (Root [ void] := -{ Root.List argList = List();S... }- void)
     [java]   (SelfType[Root])
     [java]   (void)
     [java]   (List [( -> this)] := UnresolvedInstruction('this', unresolved))
     [java]     (SelfType[List])
     [java]     (SelfType[( -> this)])
     [java]     (ArrayList [ java.util.ArrayList] := -{ new java.util.ArrayList();  }- this)
     [java]       (SelfType[ArrayList])
     [java]       (SelfType[ java.util.ArrayList])
     [java]     (list [ java.util.ArrayList] := -{ new java.util.ArrayList();  }-)
     [java]       (SelfType[list])
     [java]       (SelfType[ java.util.ArrayList])
     [java]     (+= [(_ -> List)] := List[-{ list.add(element);  }- void, UnresolvedInstruction('this', unresolved)])
     [java]       (SelfType[+=])
     [java]       (SelfType[(_ -> List)])
     [java]     (get [(Int -> java.lang.Object)] := -{ list.get(i.toInt()._hlisp_run(... }-)
     [java]       (SelfType[get])
     [java]       (SelfType[(Int -> java.lang.Object)])
     [java]   (while [(( -> Boolean) ( -> void) -> void)] := -{ 
     [java]         while (condition._hl... }- void)    (SelfType[while])
     [java]     (SelfType[(( -> Boolean) ( -> void) -> void)])
     [java]   (Int [(int -> this)] := UnresolvedInstruction('this', unresolved))
     [java]     (SelfType[Int])
     [java]     (SelfType[(int -> this)])
     [java]     (+ [(Int -> Int)] := List[UnresolvedInstruction('Int', unresolved), -{ value + other.value  }-])
     [java]       (SelfType[+])
     [java]       (SelfType[(Int -> Int)])
     [java]     (* [(Int -> Int)] := List[UnresolvedInstruction('Int', unresolved), -{ value * other.value  }-])
     [java]       (SelfType[*])
     [java]       (SelfType[(Int -> Int)])
     [java]     (++ [( -> void)] := -{ value++; }- void)
     [java]       (SelfType[++])
     [java]       (SelfType[( -> void)])
     [java]     (< [(Int -> Boolean)] := List[UnresolvedInstruction('Boolean', unresolved), -{ value < other }-])
     [java]       (SelfType[<])
     [java]       (SelfType[(Int -> Boolean)])
     [java]     (toInt [( -> java.lang.Integer)] := -{ value;  }-)
     [java]       (SelfType[toInt])
     [java]       (SelfType[( -> java.lang.Integer)])
     [java]     (toString [( -> String)] := List[UnresolvedInstruction('String', unresolved), -{ java.lang.String.valueOf(value... }-])
     [java]       (SelfType[toString])
     [java]       (SelfType[( -> String)])
     [java]   (Boolean [(boolean -> this)] := VoidInstruction)
     [java]     (SelfType[Boolean])
     [java]     (SelfType[(boolean -> this)])
     [java]     (! [( -> Int)] := List[UnresolvedInstruction('Boolean', unresolved), -{ !value  }-])
     [java]       (SelfType[!])
     [java]       (SelfType[( -> Int)])
     [java]     (toString [( -> String)] := List[UnresolvedInstruction('String', unresolved), -{ java.lang.Boolean.toString(val... }-])
     [java]       (SelfType[toString])
     [java]       (SelfType[( -> String)])
     [java]   (String [(java.lang.String -> this)] := UnresolvedInstruction('this', unresolved))
     [java]     (SelfType[String])
     [java]     (SelfType[(java.lang.String -> this)])
     [java]     (+ [(String -> String)] := List[UnresolvedInstruction('String', unresolved), -{ value + other.value  }-])
     [java]       (SelfType[+])
     [java]       (SelfType[(String -> String)])
     [java]     (print [( -> void)] := -{ System.out.print(value);  }- void)
     [java]       (SelfType[print])
     [java]       (SelfType[( -> void)])
     [java]     (println [( -> void)] := List[List[call[null UnresolvedType(String, unresolved)(-{ ""this"" }- String)], UnresolvedInstruction('+', unresolved), call[null UnresolvedType(String, unresolved)(-{ ""\n"" }- String)]], UnresolvedInstruction('print', unresolved)])
     [java]       (SelfType[println])
     [java]       (SelfType[( -> void)])
     [java]   (MyNamespace [( -> this)] := VoidInstruction)
     [java]     (SelfType[MyNamespace])
     [java]     (SelfType[( -> this)])
     [java]     (HelloWorldClass [( -> this)] := VoidInstruction)
     [java]       (SelfType[HelloWorldClass])
     [java]       (SelfType[( -> this)])
     [java]       (count [ Int] := call[null UnresolvedType(Int, unresolved)(-{ 5 }- Int)])
     [java]         (SelfType[count])
     [java]         (SelfType[ Int])
     [java]       (foo [ Int] := call[null UnresolvedType(Int, unresolved)(-{ 0 }- Int)])
     [java]         (SelfType[foo])
     [java]         (SelfType[ Int])
     [java]       (bar [ Int] := call[null UnresolvedType(Int, unresolved)(-{ 3 }- Int)])
     [java]         (SelfType[bar])
     [java]         (SelfType[ Int])
     [java]       (bla [ Int] := List[UnresolvedInstruction('foo', unresolved), UnresolvedInstruction('+', unresolved), UnresolvedInstruction('bar', unresolved)])
     [java]         (SelfType[bla])
     [java]         (SelfType[ Int])
     [java]       (run [( -> void)] := List[List[call[null UnresolvedType(String, unresolved)(-{ ""Hello World!"" }- String)], UnresolvedInstruction('+', unresolved), List[UnresolvedInstruction('count', unresolved), UnresolvedInstruction('toString', unresolved)]], UnresolvedInstruction('print', unresolved)])
     [java]         (SelfType[run])
     [java]         (SelfType[( -> void)])
     [java]       (function [(Int Int -> Int)] := List[UnresolvedInstruction('a', unresolved), UnresolvedInstruction('+', unresolved), UnresolvedInstruction('b', unresolved)])
     [java]         (SelfType[function])
     [java]         (SelfType[(Int Int -> Int)])
     [java]     (main [(Int -> void)] := UnresolvedInstruction('while', unresolved))
     [java]       (SelfType[main])
     [java]       (SelfType[(Int -> void)])
     [java]       (i [ Int] := call[null UnresolvedType(Int, unresolved)(-{ 0 }- Int)])
     [java]         (SelfType[i])
     [java]         (SelfType[ Int])
     [java]       (eval [ Int] := List[call[null UnresolvedType(Int, unresolved)(-{ 5 }- Int)], UnresolvedInstruction('+', unresolved), List[UnresolvedInstruction('i', unresolved), UnresolvedInstruction('*', unresolved), call[null UnresolvedType(Int, unresolved)(-{ 4 }- Int)]]])
     [java]         (SelfType[eval])
     [java]         (SelfType[ Int])
     [java]       (error [( -> Int)] := call[null UnresolvedType(Int, unresolved)(-{ 0 }- Int)])
     [java]         (SelfType[error])
     [java]         (SelfType[( -> Int)])
     [java]       (k [ List] := VoidInstruction)
     [java]         (SelfType[k])
     [java]         (SelfType[ List])
     [java]       (list [ List] := List[UnresolvedInstruction('List', unresolved), UnresolvedInstruction('+=', unresolved), call[null UnresolvedType(String, unresolved)(-{ ""some"" }- String)], UnresolvedInstruction('+=', unresolved), call[null UnresolvedType(String, unresolved)(-{ ""elements"" }- String)]])
     [java]         (SelfType[list])
     [java]         (SelfType[ List])
     [java]       (evalFun [( -> Int)] := List[call[null UnresolvedType(Int, unresolved)(-{ 5 }- Int)], UnresolvedInstruction('+', unresolved), List[UnresolvedInstruction('i', unresolved), UnresolvedInstruction('*', unresolved), call[null UnresolvedType(Int, unresolved)(-{ 4 }- Int)]]])
     [java]         (SelfType[evalFun])
     [java]         (SelfType[( -> Int)])
     [java]       (helloClass [ HelloWorldClass] := VoidInstruction)
     [java]         (SelfType[helloClass])
     [java]         (SelfType[ HelloWorldClass])
     [java] Unresolved types: 
     [java]     
     [java] Unresolved values: 
     [java]     
     [java] ---------- starting resolve iteration ----------
     [java] Checking Type (Root [ void] := -{ Root.List argList = List();S... }- void)... already resolved.
     [java]   Checking Type _{java.lang.String[]}_...   already resolved.
     [java]     Checking Type (SelfType[java.lang.String[]])...     already resolved.
     [java]   Checking Type UnresolvedType(void, unresolved)...   resolved to (void).
     [java]   Checking Type (SelfType[Root])...   already resolved.
     [java]     Checking Type (void)...     already resolved.
     [java]       Checking Type (void)...       already resolved.
     [java]     Checking Type (List [( -> this)] := UnresolvedInstruction('this', unresolved))...     already resolved.
     [java]       Checking Type UnresolvedType(this, unresolved)...       resolved to (List [( -> this)] := UnresolvedInstruction('this', unresolved)).
     [java]         Checking Type (SelfType[List])...         already resolved.
     [java]           Checking Type (SelfType[( -> List)])...           already resolved.
     [java]             Checking Type (ArrayList [ java.util.ArrayList] := -{ new java.util.ArrayList();  }- this)...             already resolved.
     [java]               Checking Type _{java.util.ArrayList}_...               already resolved.
     [java]                 Checking Type (SelfType[java.util.ArrayList])...                 already resolved.
     [java]               Checking Type (SelfType[ArrayList])...               already resolved.
     [java]                 Checking Type (SelfType[ java.util.ArrayList])...                 already resolved.
     [java]             Checking Type (list [ java.util.ArrayList] := -{ new java.util.ArrayList();  }-)...             already resolved.
     [java]               Checking Type (SelfType[list])...               already resolved.
     [java]                 Checking Type (SelfType[ java.util.ArrayList])...                 already resolved.
     [java]             Checking Type (+= [(_ -> List)] := List[-{ list.add(element);  }- void, UnresolvedInstruction('this', unresolved)])...             already resolved.
     [java]               Checking Type UnresolvedType(_, unresolved)...               resolved to _.
     [java]               Checking Type UnresolvedType(List, unresolved)...               resolved to (List [( -> self)] := UnresolvedInstruction('this', unresolved)).
     [java]               Checking Type (SelfType[+=])...               already resolved.
     [java]                 Checking Type (SelfType[(_ -> List)])...                 already resolved.
     [java]             Checking Type (get [(Int -> java.lang.Object)] := -{ list.get(i.toInt()._hlisp_run(... }-)...             already resolved.
     [java]               Checking Type UnresolvedType(Int, unresolved)...               resolved to (Int [(int -> this)] := UnresolvedInstruction('this', unresolved)).
     [java]               Checking Type _{java.lang.Object}_...               already resolved.
     [java]                 Checking Type (SelfType[java.lang.Object])...                 already resolved.
     [java]               Checking Type (SelfType[get])...               already resolved.
     [java]                 Checking Type (Int [(int -> this)] := UnresolvedInstruction('this', unresolved))...                 already resolved.
     [java]                   Checking Type _{int}_...                   already resolved.
     [java]                     Checking Type (SelfType[int])...                     already resolved.
     [java]                   Checking Type UnresolvedType(this, unresolved)...                   resolved to (Int [(int -> this)] := UnresolvedInstruction('this', unresolved)).
     [java]                     Checking Type (SelfType[Int])...                     already resolved.
     [java]                       Checking Type (SelfType[(int -> Int)])...                       already resolved.
     [java]                         Checking Type (+ [(Int -> Int)] := List[UnresolvedInstruction('Int', unresolved), -{ value + other.value  }-])...                         already resolved.
     [java]                           Checking Type UnresolvedType(Int, unresolved)...                           resolved to (Int [(int -> self)] := UnresolvedInstruction('this', unresolved)).
     [java]                           Checking Type UnresolvedType(Int, unresolved)...                           resolved to (Int [(int -> self)] := UnresolvedInstruction('this', unresolved)).
     [java]                           Checking Type (SelfType[+])...                           already resolved.
     [java]                             Checking Type (SelfType[(Int -> Int)])...                             already resolved.
     [java]                         Checking Type (* [(Int -> Int)] := List[UnresolvedInstruction('Int', unresolved), -{ value * other.value  }-])...                         already resolved.
     [java]                           Checking Type UnresolvedType(Int, unresolved)...                           resolved to (Int [(int -> self)] := UnresolvedInstruction('this', unresolved)).
     [java]                           Checking Type UnresolvedType(Int, unresolved)...                           resolved to (Int [(int -> self)] := UnresolvedInstruction('this', unresolved)).
     [java]                           Checking Type (SelfType[*])...                           already resolved.
     [java]                             Checking Type (SelfType[(Int -> Int)])...                             already resolved.
     [java]                         Checking Type (++ [( -> void)] := -{ value++; }- void)...                         already resolved.
     [java]                           Checking Type UnresolvedType(void, unresolved)...                           resolved to (void).
     [java]                           Checking Type (SelfType[++])...                           already resolved.
     [java]                             Checking Type (SelfType[( -> void)])...                             already resolved.
     [java]                         Checking Type (< [(Int -> Boolean)] := List[UnresolvedInstruction('Boolean', unresolved), -{ value < other }-])...                         already resolved.
     [java]                           Checking Type UnresolvedType(Int, unresolved)...                           resolved to (Int [(int -> self)] := UnresolvedInstruction('this', unresolved)).
     [java]                           Checking Type UnresolvedType(Boolean, unresolved)...                           resolved to (Boolean [(boolean -> this)] := VoidInstruction).
     [java]                           Checking Type (SelfType[<])...                           already resolved.
     [java]                             Checking Type (Boolean [(boolean -> this)] := VoidInstruction)...                             already resolved.
     [java]                               Checking Type _{boolean}_...                               already resolved.
     [java]                                 Checking Type (SelfType[boolean])...                                 already resolved.
     [java]                               Checking Type UnresolvedType(this, unresolved)...                               resolved to (Boolean [(boolean -> this)] := VoidInstruction).
     [java]                                 Checking Type (SelfType[Boolean])...                                 already resolved.
     [java]                                   Checking Type (SelfType[(boolean -> Boolean)])...                                   already resolved.
     [java]                                     Checking Type (! [( -> Int)] := List[UnresolvedInstruction('Boolean', unresolved), -{ !value  }-])...                                     already resolved.
     [java]                                       Checking Type UnresolvedType(Int, unresolved)...                                       resolved to (Int [(int -> self)] := UnresolvedInstruction('this', unresolved)).
     [java]                                       Checking Type (SelfType[!])...                                       already resolved.
     [java]                                         Checking Type (SelfType[( -> Int)])...                                         already resolved.
     [java]                                     Checking Type (toString [( -> String)] := List[UnresolvedInstruction('String', unresolved), -{ java.lang.Boolean.toString(val... }-])...                                     already resolved.
     [java]                                       Checking Type UnresolvedType(String, unresolved)...                                       resolved to (String [(java.lang.String -> this)] := UnresolvedInstruction('this', unresolved)).
     [java]                                       Checking Type (SelfType[toString])...                                       already resolved.
     [java]                                         Checking Type (String [(java.lang.String -> this)] := UnresolvedInstruction('this', unresolved))...                                         already resolved.
     [java]                                           Checking Type _{java.lang.String}_...                                           already resolved.
     [java]                                             Checking Type (SelfType[java.lang.String])...                                             already resolved.
     [java]                                           Checking Type UnresolvedType(this, unresolved)...                                           resolved to (String [(java.lang.String -> this)] := UnresolvedInstruction('this', unresolved)).
     [java]                                             Checking Type (SelfType[String])...                                             already resolved.
     [java]                                               Checking Type (SelfType[(java.lang.String -> String)])...                                               already resolved.
     [java]                                                 Checking Type (+ [(String -> String)] := List[UnresolvedInstruction('String', unresolved), -{ value + other.value  }-])...                                                 already resolved.
     [java]                                                   Checking Type UnresolvedType(String, unresolved)...                                                   resolved to (String [(java.lang.String -> self)] := UnresolvedInstruction('this', unresolved)).
     [java]                                                   Checking Type UnresolvedType(String, unresolved)...                                                   resolved to (String [(java.lang.String -> self)] := UnresolvedInstruction('this', unresolved)).
     [java]                                                   Checking Type (SelfType[+])...                                                   already resolved.
     [java]                                                     Checking Type (SelfType[(String -> String)])...                                                     already resolved.
     [java]                                                 Checking Type (print [( -> void)] := -{ System.out.print(value);  }- void)...                                                 already resolved.
     [java]                                                   Checking Type UnresolvedType(void, unresolved)...                                                   resolved to (void).
     [java]                                                   Checking Type (SelfType[print])...                                                   already resolved.
     [java]                                                     Checking Type (SelfType[( -> void)])...                                                     already resolved.
     [java]                                                 Checking Type (println [( -> void)] := List[List[call[null UnresolvedType(String, unresolved)(-{ ""this"" }- String)], UnresolvedInstruction('+', unresolved), call[null UnresolvedType(String, unresolved)(-{ ""\n"" }- String)]], UnresolvedInstruction('print', unresolved)])...                                                 already resolved.
     [java]                                                   Checking Type UnresolvedType(void, unresolved)...                                                   resolved to (void).
     [java]                                                   Checking Type (SelfType[println])...                                                   already resolved.
     [java]                                                     Checking Type (SelfType[( -> void)])...                                                     already resolved.
     [java]                                         Checking Type (SelfType[( -> String)])...                                         already resolved.
     [java]                             Checking Type (SelfType[(Int -> Boolean)])...                             already resolved.
     [java]                         Checking Type (toInt [( -> java.lang.Integer)] := -{ value;  }-)...                         already resolved.
     [java]                           Checking Type _{java.lang.Integer}_...                           already resolved.
     [java]                             Checking Type (SelfType[java.lang.Integer])...                             already resolved.
     [java]                           Checking Type (SelfType[toInt])...                           already resolved.
     [java]                             Checking Type (SelfType[( -> java.lang.Integer)])...                             already resolved.
     [java]                         Checking Type (toString [( -> String)] := List[UnresolvedInstruction('String', unresolved), -{ java.lang.String.valueOf(value... }-])...                         already resolved.
     [java]                           Checking Type UnresolvedType(String, unresolved)...                           resolved to (String [(java.lang.String -> self)] := UnresolvedInstruction('this', unresolved)).
     [java]                           Checking Type (SelfType[toString])...                           already resolved.
     [java]                             Checking Type (SelfType[( -> String)])...                             already resolved.
     [java]                 Checking Type (SelfType[(Int -> java.lang.Object)])...                 already resolved.
     [java]     Checking Type (while [(( -> Boolean) ( -> void) -> void)] := -{ 
     [java]         while (condition._hl... }- void)...     already resolved.      Checking Type (( -> Boolean))...       already resolved.
     [java]         Checking Type UnresolvedType(Boolean, unresolved)...         resolved to (Boolean [(boolean -> self)] := VoidInstruction).
     [java]         Checking Type (SelfType[( -> Boolean)])...         already resolved.
     [java]       Checking Type (( -> void))...       already resolved.
     [java]         Checking Type UnresolvedType(void, unresolved)...         resolved to (void).
     [java]         Checking Type (SelfType[( -> void)])...         already resolved.
     [java]       Checking Type UnresolvedType(void, unresolved)...       resolved to (void).
     [java]       Checking Type (SelfType[while])...       already resolved.
     [java]         Checking Type (SelfType[(( -> Boolean) ( -> void) -> void)])...         already resolved.
     [java]     Checking Type (MyNamespace [( -> this)] := VoidInstruction)...     already resolved.
     [java]       Checking Type UnresolvedType(this, unresolved)...       resolved to (MyNamespace [( -> this)] := VoidInstruction).
     [java]         Checking Type (SelfType[MyNamespace])...         already resolved.
     [java]           Checking Type (SelfType[( -> MyNamespace)])...           already resolved.
     [java]             Checking Type (HelloWorldClass [( -> this)] := VoidInstruction)...             already resolved.
     [java]               Checking Type UnresolvedType(this, unresolved)...               resolved to (HelloWorldClass [( -> this)] := VoidInstruction).
     [java]                 Checking Type (SelfType[HelloWorldClass])...                 already resolved.
     [java]                   Checking Type (SelfType[( -> HelloWorldClass)])...                   already resolved.
     [java]                     Checking Type (count [ Int] := call[null UnresolvedType(Int, unresolved)(-{ 5 }- Int)])...                     already resolved.
     [java]                       Checking Type UnresolvedType(Int, unresolved)...                       resolved to (Int [(int -> self)] := UnresolvedInstruction('this', unresolved)).
     [java]                       Checking Type (SelfType[count])...                       already resolved.
     [java]                         Checking Type (SelfType[ Int])...                         already resolved.
     [java]                     Checking Type (foo [ Int] := call[null UnresolvedType(Int, unresolved)(-{ 0 }- Int)])...                     already resolved.
     [java]                       Checking Type UnresolvedType(Int, unresolved)...                       resolved to (Int [(int -> self)] := UnresolvedInstruction('this', unresolved)).
     [java]                       Checking Type (SelfType[foo])...                       already resolved.
     [java]                         Checking Type (SelfType[ Int])...                         already resolved.
     [java]                     Checking Type (bar [ Int] := call[null UnresolvedType(Int, unresolved)(-{ 3 }- Int)])...                     already resolved.
     [java]                       Checking Type UnresolvedType(Int, unresolved)...                       resolved to (Int [(int -> self)] := UnresolvedInstruction('this', unresolved)).
     [java]                       Checking Type (SelfType[bar])...                       already resolved.
     [java]                         Checking Type (SelfType[ Int])...                         already resolved.
     [java]                     Checking Type (bla [ Int] := List[UnresolvedInstruction('foo', unresolved), UnresolvedInstruction('+', unresolved), UnresolvedInstruction('bar', unresolved)])...                     already resolved.
     [java]                       Checking Type UnresolvedType(Int, unresolved)...                       resolved to (Int [(int -> self)] := UnresolvedInstruction('this', unresolved)).
     [java]                       Checking Type (SelfType[bla])...                       already resolved.
     [java]                         Checking Type (SelfType[ Int])...                         already resolved.
     [java]                     Checking Type (run [( -> void)] := List[List[call[null UnresolvedType(String, unresolved)(-{ ""Hello World!"" }- String)], UnresolvedInstruction('+', unresolved), List[UnresolvedInstruction('count', unresolved), UnresolvedInstruction('toString', unresolved)]], UnresolvedInstruction('print', unresolved)])...                     already resolved.
     [java]                       Checking Type UnresolvedType(void, unresolved)...                       resolved to (void).
     [java]                       Checking Type (SelfType[run])...                       already resolved.
     [java]                         Checking Type (SelfType[( -> void)])...                         already resolved.
     [java]                     Checking Type (function [(Int Int -> Int)] := List[UnresolvedInstruction('a', unresolved), UnresolvedInstruction('+', unresolved), UnresolvedInstruction('b', unresolved)])...                     already resolved.
     [java]                       Checking Type UnresolvedType(Int, unresolved)...                       resolved to (Int [(int -> self)] := UnresolvedInstruction('this', unresolved)).
     [java]                       Checking Type UnresolvedType(Int, unresolved)...                       resolved to (Int [(int -> self)] := UnresolvedInstruction('this', unresolved)).
     [java]                       Checking Type UnresolvedType(Int, unresolved)...                       resolved to (Int [(int -> self)] := UnresolvedInstruction('this', unresolved)).
     [java]                       Checking Type (SelfType[function])...                       already resolved.
     [java]                         Checking Type (SelfType[(Int Int -> Int)])...                         already resolved.
     [java]             Checking Type (main [(Int -> void)] := UnresolvedInstruction('while', unresolved))...             already resolved.
     [java]               Checking Type UnresolvedType(Int, unresolved)...               resolved to (Int [(int -> self)] := UnresolvedInstruction('this', unresolved)).
     [java]               Checking Type UnresolvedType(void, unresolved)...               resolved to (void).
     [java]               Checking Type (SelfType[main])...               already resolved.
     [java]                 Checking Type (SelfType[(Int -> void)])...                 already resolved.
     [java]                   Checking Type (i [ Int] := call[null UnresolvedType(Int, unresolved)(-{ 0 }- Int)])...                   already resolved.
     [java]                     Checking Type UnresolvedType(Int, unresolved)...                     resolved to (Int [(int -> self)] := UnresolvedInstruction('this', unresolved)).
     [java]                     Checking Type (SelfType[i])...                     already resolved.
     [java]                       Checking Type (SelfType[ Int])...                       already resolved.
     [java]                   Checking Type (eval [ Int] := List[call[null UnresolvedType(Int, unresolved)(-{ 5 }- Int)], UnresolvedInstruction('+', unresolved), List[UnresolvedInstruction('i', unresolved), UnresolvedInstruction('*', unresolved), call[null UnresolvedType(Int, unresolved)(-{ 4 }- Int)]]])...                   already resolved.
     [java]                     Checking Type UnresolvedType(Int, unresolved)...                     resolved to (Int [(int -> self)] := UnresolvedInstruction('this', unresolved)).
     [java]                     Checking Type (SelfType[eval])...                     already resolved.
     [java]                       Checking Type (SelfType[ Int])...                       already resolved.
     [java]                   Checking Type (error [( -> Int)] := call[null UnresolvedType(Int, unresolved)(-{ 0 }- Int)])...                   already resolved.
     [java]                     Checking Type UnresolvedType(Int, unresolved)...                     resolved to (Int [(int -> self)] := UnresolvedInstruction('this', unresolved)).
     [java]                     Checking Type (SelfType[error])...                     already resolved.
     [java]                       Checking Type (SelfType[( -> Int)])...                       already resolved.
     [java]                   Checking Type (k [ List] := VoidInstruction)...                   already resolved.
     [java]                     Checking Type UnresolvedType(List, unresolved)...                     resolved to (List [( -> self)] := UnresolvedInstruction('this', unresolved)).
     [java]                     Checking Type (SelfType[k])...                     already resolved.
     [java]                       Checking Type (SelfType[ List])...                       already resolved.
     [java]                   Checking Type (list [ List] := List[UnresolvedInstruction('List', unresolved), UnresolvedInstruction('+=', unresolved), call[null UnresolvedType(String, unresolved)(-{ ""some"" }- String)], UnresolvedInstruction('+=', unresolved), call[null UnresolvedType(String, unresolved)(-{ ""elements"" }- String)]])...                   already resolved.
     [java]                     Checking Type UnresolvedType(List, unresolved)...                     resolved to (List [( -> self)] := UnresolvedInstruction('this', unresolved)).
     [java]                     Checking Type (SelfType[list])...                     already resolved.
     [java]                       Checking Type (SelfType[ List])...                       already resolved.
     [java]                   Checking Type (evalFun [( -> Int)] := List[call[null UnresolvedType(Int, unresolved)(-{ 5 }- Int)], UnresolvedInstruction('+', unresolved), List[UnresolvedInstruction('i', unresolved), UnresolvedInstruction('*', unresolved), call[null UnresolvedType(Int, unresolved)(-{ 4 }- Int)]]])...                   already resolved.
     [java]                     Checking Type UnresolvedType(Int, unresolved)...                     resolved to (Int [(int -> self)] := UnresolvedInstruction('this', unresolved)).
     [java]                     Checking Type (SelfType[evalFun])...                     already resolved.
     [java]                       Checking Type (SelfType[( -> Int)])...                       already resolved.
     [java]                   Checking Type (helloClass [ HelloWorldClass] := VoidInstruction)...                   already resolved.
     [java]                     Checking Type UnresolvedType(HelloWorldClass, unresolved)...                     resolved to (HelloWorldClass [( -> self)] := VoidInstruction).
     [java]                     Checking Type (SelfType[helloClass])...                     already resolved.
     [java]                       Checking Type (SelfType[ HelloWorldClass])...                       already resolved.
     [java] Unresolved types: 
     [java]     
     [java] Unresolved values: 
     [java]     
     [java] Instruction -{ Root.List argList = List();S... }- void in (Root [ void] := -{ Root.List argList = List();S... }- void) needs solving.
     [java] Solved to -{ Root.List argList = List();S... }- void
     [java]   Instruction null in _{java.lang.String[]}_ needs solving.
     [java]   Solved to null
     [java]     Instruction -{ this }- in (SelfType[java.lang.String[]]) needs solving.
     [java]     Solved to -{ this }-
     [java]   Instruction -{ null }- void in (void) needs solving.
     [java]   Solved to -{ null }- void
     [java]     Instruction -{ null }- void in (void) needs solving.
     [java]     Solved to -{ null }- void
     [java]   Instruction -{ this }- Root in (SelfType[Root]) needs solving.
     [java]   Solved to -{ this }- Root
     [java]     Instruction UnresolvedInstruction('this', unresolved) in (List [( -> self)] := UnresolvedInstruction('this', unresolved)) needs solving.
     [java]       Solved to call[(List [( -> self)] := UnresolvedInstruction('this', unresolved)) (SelfType[List])()]
     [java]         Instruction -{ this }- List in (SelfType[List]) needs solving.
     [java]         Solved to -{ this }- List
     [java]           Instruction -{ this }- in (SelfType[( -> List)]) needs solving.
     [java]               Checking Type (( -> List))...               already resolved.
     [java]           Solved to -{ this }-
     [java]             Instruction -{ new java.util.ArrayList();  }- this in (ArrayList [ java.util.ArrayList] := -{ new java.util.ArrayList();  }- this) needs solving.
     [java]                 Checking Type UnresolvedType(this, unresolved)...                 resolved to (ArrayList [ java.util.ArrayList] := -{ new java.util.ArrayList();  }- this).
     [java]             Solved to -{ new java.util.ArrayList();  }- ArrayList
     [java]               Instruction null in _{java.util.ArrayList}_ needs solving.
     [java]               Solved to null
     [java]                 Instruction -{ this }- in (SelfType[java.util.ArrayList]) needs solving.
     [java]                 Solved to -{ this }-
     [java]               Instruction -{ this }- ArrayList in (SelfType[ArrayList]) needs solving.
     [java]               Solved to -{ this }- ArrayList
     [java]                 Instruction -{ this }- in (SelfType[ java.util.ArrayList]) needs solving.
     [java]                     Checking Type ( java.util.ArrayList)...                     already resolved.
     [java]                 Solved to -{ this }-
     [java]             Instruction -{ new java.util.ArrayList();  }- in (list [ java.util.ArrayList] := -{ new java.util.ArrayList();  }-) needs solving.
     [java]             Solved to -{ new java.util.ArrayList();  }-
     [java]               Instruction -{ this }- list in (SelfType[list]) needs solving.
     [java]               Solved to -{ this }- list
     [java]                 Instruction -{ this }- in (SelfType[ java.util.ArrayList]) needs solving.
     [java]                     Checking Type ( java.util.ArrayList)...                     already resolved.
     [java]                 Solved to -{ this }-
     [java]             Instruction List[-{ list.add(element);  }- void, UnresolvedInstruction('this', unresolved)] in (+= [(_ -> List)] := List[-{ list.add(element);  }- void, UnresolvedInstruction('this', unresolved)]) needs solving.
     [java]               /----Solving List[-{ list.add(element);  }- void, UnresolvedInstruction('this', unresolved)]
     [java]                     Checking Type UnresolvedType(void, unresolved)...                     resolved to (void).
     [java]                 0. child -{ list.add(element);  }- void
     [java]                   Next is a function with no parameters.
     [java]                   lastFunctionCall = call[(void) (( -> void))()]
     [java]                   1. child call[(+= [(_ -> List)] := List[-{ list.add(element);  }- void, UnresolvedInstruction('this', unresolved)]) (SelfType[+=])()]
     [java]                     no check, 1 < 0
     [java]                 adding call[(+= [(_ -> List)] := List[-{ list.add(element);  }- void, UnresolvedInstruction('this', unresolved)]) (SelfType[+=])()] to result.
     [java]                 ----/Result: call[(+= [(_ -> List)] := List[-{ list.add(element);  }- void, UnresolvedInstruction('this', unresolved)]) (SelfType[+=])()]
     [java]                 Solved to call[(+= [(_ -> List)] := List[-{ list.add(element);  }- void, UnresolvedInstruction('this', unresolved)]) (SelfType[+=])()]
     [java]                   Instruction -{ this }- += in (SelfType[+=]) needs solving.
     [java]                   Solved to -{ this }- +=
     [java]                     Instruction -{ this }- in (SelfType[(_ -> List)]) needs solving.
     [java]                         Checking Type ((_ -> List))...                         already resolved.
     [java]                     Solved to -{ this }-
     [java]                 Instruction -{ list.get(i.toInt()._hlisp_run(... }- in (get [(Int -> java.lang.Object)] := -{ list.get(i.toInt()._hlisp_run(... }-) needs solving.
     [java]                 Solved to -{ list.get(i.toInt()._hlisp_run(... }-
     [java]                   Instruction UnresolvedInstruction('this', unresolved) in (Int [(int -> self)] := UnresolvedInstruction('this', unresolved)) needs solving.
     [java]                     Solved to call[(Int [(int -> self)] := UnresolvedInstruction('this', unresolved)) (SelfType[Int])()]
     [java]                       Instruction null in _{int}_ needs solving.
     [java]                       Solved to null
     [java]                         Instruction -{ this }- in (SelfType[int]) needs solving.
     [java]                         Solved to -{ this }-
     [java]                       Instruction -{ this }- Int in (SelfType[Int]) needs solving.
     [java]                       Solved to -{ this }- Int
     [java]                         Instruction -{ this }- in (SelfType[(int -> Int)]) needs solving.
     [java]                             Checking Type ((int -> Int))...                             already resolved.
     [java]                         Solved to -{ this }-
     [java]                           Instruction List[UnresolvedInstruction('Int', unresolved), -{ value + other.value  }-] in (+ [(Int -> Int)] := List[UnresolvedInstruction('Int', unresolved), -{ value + other.value  }-]) needs solving.
     [java]                             /----Solving List[UnresolvedInstruction('Int', unresolved), -{ value + other.value  }-]
     [java]                                 0. child call[(+ [(Int -> Int)] := List[UnresolvedInstruction('Int', unresolved), -{ value + other.value  }-]) (Int [(int -> self)] := -{ this }- Int)()]
     [java]                                   Next is a function (Int [(int -> self)] := -{ this }- Int)
     [java]                                   with parameters _{int}_.
     [java]                                 1. child -{ value + other.value  }-
     [java]                                   check, 0 < 1
     [java]                                   -{ value + other.value  }- is parameter.
     [java]                                   Function call to (Int [(int -> self)] := -{ this }- Int) complete.
     [java]                                   Next is a function (Int [(int -> self)] := -{ this }- Int)
     [java]                                   with parameters _{int}_.
     [java]                                   lastFunctionCall = call[(+ [(Int -> Int)] := List[UnresolvedInstruction('Int', unresolved), -{ value + other.value  }-]) (Int [(int -> self)] := -{ this }- Int)(-{ value + other.value  }-)]
     [java]                               adding call[(+ [(Int -> Int)] := List[UnresolvedInstruction('Int', unresolved), -{ value + other.value  }-]) (Int [(int -> self)] := -{ this }- Int)(-{ value + other.value  }-)] to result.
     [java]                               ----/Result: call[(+ [(Int -> Int)] := List[UnresolvedInstruction('Int', unresolved), -{ value + other.value  }-]) (Int [(int -> self)] := -{ this }- Int)(-{ value + other.value  }-)]
     [java]                               Solved to call[(+ [(Int -> Int)] := List[UnresolvedInstruction('Int', unresolved), -{ value + other.value  }-]) (Int [(int -> self)] := -{ this }- Int)(-{ value + other.value  }-)]
     [java]                                 Instruction -{ this }- + in (SelfType[+]) needs solving.
     [java]                                 Solved to -{ this }- +
     [java]                                   Instruction -{ this }- in (SelfType[(Int -> Int)]) needs solving.
     [java]                                       Checking Type ((Int -> Int))...                                       already resolved.
     [java]                                   Solved to -{ this }-
     [java]                               Instruction List[UnresolvedInstruction('Int', unresolved), -{ value * other.value  }-] in (* [(Int -> Int)] := List[UnresolvedInstruction('Int', unresolved), -{ value * other.value  }-]) needs solving.
     [java]                                 /----Solving List[UnresolvedInstruction('Int', unresolved), -{ value * other.value  }-]
     [java]                                     0. child call[(* [(Int -> Int)] := List[UnresolvedInstruction('Int', unresolved), -{ value * other.value  }-]) (Int [(int -> self)] := -{ this }- Int)()]
     [java]                                       Next is a function (Int [(int -> self)] := -{ this }- Int)
     [java]                                       with parameters _{int}_.
     [java]                                     1. child -{ value * other.value  }-
     [java]                                       check, 0 < 1
     [java]                                       -{ value * other.value  }- is parameter.
     [java]                                       Function call to (Int [(int -> self)] := -{ this }- Int) complete.
     [java]                                       Next is a function (Int [(int -> self)] := -{ this }- Int)
     [java]                                       with parameters _{int}_.
     [java]                                       lastFunctionCall = call[(* [(Int -> Int)] := List[UnresolvedInstruction('Int', unresolved), -{ value * other.value  }-]) (Int [(int -> self)] := -{ this }- Int)(-{ value * other.value  }-)]
     [java]                                   adding call[(* [(Int -> Int)] := List[UnresolvedInstruction('Int', unresolved), -{ value * other.value  }-]) (Int [(int -> self)] := -{ this }- Int)(-{ value * other.value  }-)] to result.
     [java]                                   ----/Result: call[(* [(Int -> Int)] := List[UnresolvedInstruction('Int', unresolved), -{ value * other.value  }-]) (Int [(int -> self)] := -{ this }- Int)(-{ value * other.value  }-)]
     [java]                                   Solved to call[(* [(Int -> Int)] := List[UnresolvedInstruction('Int', unresolved), -{ value * other.value  }-]) (Int [(int -> self)] := -{ this }- Int)(-{ value * other.value  }-)]
     [java]                                     Instruction -{ this }- * in (SelfType[*]) needs solving.
     [java]                                     Solved to -{ this }- *
     [java]                                       Instruction -{ this }- in (SelfType[(Int -> Int)]) needs solving.
     [java]                                           Checking Type ((Int -> Int))...                                           already resolved.
     [java]                                       Solved to -{ this }-
     [java]                                   Instruction -{ value++; }- void in (++ [( -> void)] := -{ value++; }- void) needs solving.
     [java]                                       Checking Type UnresolvedType(void, unresolved)...                                       resolved to (void).
     [java]                                   Solved to -{ value++; }- void
     [java]                                     Instruction -{ this }- ++ in (SelfType[++]) needs solving.
     [java]                                     Solved to -{ this }- ++
     [java]                                       Instruction -{ this }- in (SelfType[( -> void)]) needs solving.
     [java]                                           Checking Type (( -> void))...                                           already resolved.
     [java]                                       Solved to -{ this }-
     [java]                                   Instruction List[UnresolvedInstruction('Boolean', unresolved), -{ value < other }-] in (< [(Int -> Boolean)] := List[UnresolvedInstruction('Boolean', unresolved), -{ value < other }-]) needs solving.
     [java]                                     /----Solving List[UnresolvedInstruction('Boolean', unresolved), -{ value < other }-]
     [java]                                         0. child call[(< [(Int -> Boolean)] := List[UnresolvedInstruction('Boolean', unresolved), -{ value < other }-]) (Boolean [(boolean -> self)] := VoidInstruction)()]
     [java]                                           Next is a function (Boolean [(boolean -> self)] := VoidInstruction)
     [java]                                           with parameters _{boolean}_.
     [java]                                         1. child -{ value < other }-
     [java]                                           check, 0 < 1
     [java]                                           -{ value < other }- is parameter.
     [java]                                           Function call to (Boolean [(boolean -> self)] := VoidInstruction) complete.
     [java]                                           Next is a function (Boolean [(boolean -> self)] := VoidInstruction)
     [java]                                           with parameters _{boolean}_.
     [java]                                           lastFunctionCall = call[(< [(Int -> Boolean)] := List[UnresolvedInstruction('Boolean', unresolved), -{ value < other }-]) (Boolean [(boolean -> self)] := VoidInstruction)(-{ value < other }-)]
     [java]                                       adding call[(< [(Int -> Boolean)] := List[UnresolvedInstruction('Boolean', unresolved), -{ value < other }-]) (Boolean [(boolean -> self)] := VoidInstruction)(-{ value < other }-)] to result.
     [java]                                       ----/Result: call[(< [(Int -> Boolean)] := List[UnresolvedInstruction('Boolean', unresolved), -{ value < other }-]) (Boolean [(boolean -> self)] := VoidInstruction)(-{ value < other }-)]
     [java]                                       Solved to call[(< [(Int -> Boolean)] := List[UnresolvedInstruction('Boolean', unresolved), -{ value < other }-]) (Boolean [(boolean -> self)] := VoidInstruction)(-{ value < other }-)]
     [java]                                         Instruction VoidInstruction in (Boolean [(boolean -> self)] := VoidInstruction) needs solving.
     [java]                                             Checking Type UnresolvedType(void, unresolved)...                                             resolved to (void).
     [java]                                         Solved to VoidInstruction
     [java]                                           Instruction null in _{boolean}_ needs solving.
     [java]                                           Solved to null
     [java]                                             Instruction -{ this }- in (SelfType[boolean]) needs solving.
     [java]                                             Solved to -{ this }-
     [java]                                           Instruction -{ this }- Boolean in (SelfType[Boolean]) needs solving.
     [java]                                           Solved to -{ this }- Boolean
     [java]                                             Instruction -{ this }- in (SelfType[(boolean -> Boolean)]) needs solving.
     [java]                                                 Checking Type ((boolean -> Boolean))...                                                 already resolved.
     [java]                                             Solved to -{ this }-
     [java]                                               Instruction List[UnresolvedInstruction('Boolean', unresolved), -{ !value  }-] in (! [( -> Int)] := List[UnresolvedInstruction('Boolean', unresolved), -{ !value  }-]) needs solving.
     [java]                                                 /----Solving List[UnresolvedInstruction('Boolean', unresolved), -{ !value  }-]
     [java]                                                     0. child call[(! [( -> Int)] := List[UnresolvedInstruction('Boolean', unresolved), -{ !value  }-]) (Boolean [(boolean -> self)] := -{ this }- Boolean)()]
     [java]                                                       Next is a function (Boolean [(boolean -> self)] := -{ this }- Boolean)
     [java]                                                       with parameters _{boolean}_.
     [java]                                                     1. child -{ !value  }-
     [java]                                                       check, 0 < 1
     [java]                                                       -{ !value  }- is parameter.
     [java]                                                       Function call to (Boolean [(boolean -> self)] := -{ this }- Boolean) complete.
     [java]                                                       Next is a function (Boolean [(boolean -> self)] := -{ this }- Boolean)
     [java]                                                       with parameters _{boolean}_.
     [java]                                                       lastFunctionCall = call[(! [( -> Int)] := List[UnresolvedInstruction('Boolean', unresolved), -{ !value  }-]) (Boolean [(boolean -> self)] := -{ this }- Boolean)(-{ !value  }-)]
     [java]                                                   adding call[(! [( -> Int)] := List[UnresolvedInstruction('Boolean', unresolved), -{ !value  }-]) (Boolean [(boolean -> self)] := -{ this }- Boolean)(-{ !value  }-)] to result.
     [java]                                                   ----/Result: call[(! [( -> Int)] := List[UnresolvedInstruction('Boolean', unresolved), -{ !value  }-]) (Boolean [(boolean -> self)] := -{ this }- Boolean)(-{ !value  }-)]
     [java]                                                   Solved to call[(! [( -> Int)] := List[UnresolvedInstruction('Boolean', unresolved), -{ !value  }-]) (Boolean [(boolean -> self)] := -{ this }- Boolean)(-{ !value  }-)]
     [java]                                                     Instruction -{ this }- ! in (SelfType[!]) needs solving.
     [java]                                                     Solved to -{ this }- !
     [java]                                                       Instruction -{ this }- in (SelfType[( -> Int)]) needs solving.
     [java]                                                           Checking Type (( -> Int))...                                                           already resolved.
     [java]                                                       Solved to -{ this }-
     [java]                                                   Instruction List[UnresolvedInstruction('String', unresolved), -{ java.lang.Boolean.toString(val... }-] in (toString [( -> String)] := List[UnresolvedInstruction('String', unresolved), -{ java.lang.Boolean.toString(val... }-]) needs solving.
     [java]                                                     /----Solving List[UnresolvedInstruction('String', unresolved), -{ java.lang.Boolean.toString(val... }-]
     [java]                                                         0. child call[(toString [( -> String)] := List[UnresolvedInstruction('String', unresolved), -{ java.lang.Boolean.toString(val... }-]) (String [(java.lang.String -> self)] := UnresolvedInstruction('this', unresolved))()]
     [java]                                                           Next is a function (String [(java.lang.String -> self)] := UnresolvedInstruction('this', unresolved))
     [java]                                                           with parameters _{java.lang.String}_.
     [java]                                                         1. child -{ java.lang.Boolean.toString(val... }-
     [java]                                                           check, 0 < 1
     [java]                                                           -{ java.lang.Boolean.toString(val... }- is parameter.
     [java]                                                           Function call to (String [(java.lang.String -> self)] := UnresolvedInstruction('this', unresolved)) complete.
     [java]                                                           Next is a function (String [(java.lang.String -> self)] := UnresolvedInstruction('this', unresolved))
     [java]                                                           with parameters _{java.lang.String}_.
     [java]                                                           lastFunctionCall = call[(toString [( -> String)] := List[UnresolvedInstruction('String', unresolved), -{ java.lang.Boolean.toString(val... }-]) (String [(java.lang.String -> self)] := UnresolvedInstruction('this', unresolved))(-{ java.lang.Boolean.toString(val... }-)]
     [java]                                                       adding call[(toString [( -> String)] := List[UnresolvedInstruction('String', unresolved), -{ java.lang.Boolean.toString(val... }-]) (String [(java.lang.String -> self)] := UnresolvedInstruction('this', unresolved))(-{ java.lang.Boolean.toString(val... }-)] to result.
     [java]                                                       ----/Result: call[(toString [( -> String)] := List[UnresolvedInstruction('String', unresolved), -{ java.lang.Boolean.toString(val... }-]) (String [(java.lang.String -> self)] := UnresolvedInstruction('this', unresolved))(-{ java.lang.Boolean.toString(val... }-)]
     [java]                                                       Solved to call[(toString [( -> String)] := List[UnresolvedInstruction('String', unresolved), -{ java.lang.Boolean.toString(val... }-]) (String [(java.lang.String -> self)] := UnresolvedInstruction('this', unresolved))(-{ java.lang.Boolean.toString(val... }-)]
     [java]                                                         Instruction UnresolvedInstruction('this', unresolved) in (String [(java.lang.String -> self)] := UnresolvedInstruction('this', unresolved)) needs solving.
     [java]                                                           Solved to call[(String [(java.lang.String -> self)] := UnresolvedInstruction('this', unresolved)) (SelfType[String])()]
     [java]                                                             Instruction null in _{java.lang.String}_ needs solving.
     [java]                                                             Solved to null
     [java]                                                               Instruction -{ this }- in (SelfType[java.lang.String]) needs solving.
     [java]                                                               Solved to -{ this }-
     [java]                                                             Instruction -{ this }- String in (SelfType[String]) needs solving.
     [java]                                                             Solved to -{ this }- String
     [java]                                                               Instruction -{ this }- in (SelfType[(java.lang.String -> String)]) needs solving.
     [java]                                                                   Checking Type ((java.lang.String -> String))...                                                                   already resolved.
     [java]                                                               Solved to -{ this }-
     [java]                                                                 Instruction List[UnresolvedInstruction('String', unresolved), -{ value + other.value  }-] in (+ [(String -> String)] := List[UnresolvedInstruction('String', unresolved), -{ value + other.value  }-]) needs solving.
     [java]                                                                   /----Solving List[UnresolvedInstruction('String', unresolved), -{ value + other.value  }-]
     [java]                                                                       0. child call[(+ [(String -> String)] := List[UnresolvedInstruction('String', unresolved), -{ value + other.value  }-]) (String [(java.lang.String -> self)] := -{ this }- String)()]
     [java]                                                                         Next is a function (String [(java.lang.String -> self)] := -{ this }- String)
     [java]                                                                         with parameters _{java.lang.String}_.
     [java]                                                                       1. child -{ value + other.value  }-
     [java]                                                                         check, 0 < 1
     [java]                                                                         -{ value + other.value  }- is parameter.
     [java]                                                                         Function call to (String [(java.lang.String -> self)] := -{ this }- String) complete.
     [java]                                                                         Next is a function (String [(java.lang.String -> self)] := -{ this }- String)
     [java]                                                                         with parameters _{java.lang.String}_.
     [java]                                                                         lastFunctionCall = call[(+ [(String -> String)] := List[UnresolvedInstruction('String', unresolved), -{ value + other.value  }-]) (String [(java.lang.String -> self)] := -{ this }- String)(-{ value + other.value  }-)]
     [java]                                                                     adding call[(+ [(String -> String)] := List[UnresolvedInstruction('String', unresolved), -{ value + other.value  }-]) (String [(java.lang.String -> self)] := -{ this }- String)(-{ value + other.value  }-)] to result.
     [java]                                                                     ----/Result: call[(+ [(String -> String)] := List[UnresolvedInstruction('String', unresolved), -{ value + other.value  }-]) (String [(java.lang.String -> self)] := -{ this }- String)(-{ value + other.value  }-)]
     [java]                                                                     Solved to call[(+ [(String -> String)] := List[UnresolvedInstruction('String', unresolved), -{ value + other.value  }-]) (String [(java.lang.String -> self)] := -{ this }- String)(-{ value + other.value  }-)]
     [java]                                                                       Instruction -{ this }- + in (SelfType[+]) needs solving.
     [java]                                                                       Solved to -{ this }- +
     [java]                                                                         Instruction -{ this }- in (SelfType[(String -> String)]) needs solving.
     [java]                                                                             Checking Type ((String -> String))...                                                                             already resolved.
     [java]                                                                         Solved to -{ this }-
     [java]                                                                     Instruction -{ System.out.print(value);  }- void in (print [( -> void)] := -{ System.out.print(value);  }- void) needs solving.
     [java]                                                                         Checking Type UnresolvedType(void, unresolved)...                                                                         resolved to (void).
     [java]                                                                     Solved to -{ System.out.print(value);  }- void
     [java]                                                                       Instruction -{ this }- print in (SelfType[print]) needs solving.
     [java]                                                                       Solved to -{ this }- print
     [java]                                                                         Instruction -{ this }- in (SelfType[( -> void)]) needs solving.
     [java]                                                                             Checking Type (( -> void))...                                                                             already resolved.
     [java]                                                                         Solved to -{ this }-
     [java]                                                                     Instruction List[List[call[null UnresolvedType(String, unresolved)(-{ ""this"" }- String)], UnresolvedInstruction('+', unresolved), call[null UnresolvedType(String, unresolved)(-{ ""\n"" }- String)]], UnresolvedInstruction('print', unresolved)] in (println [( -> void)] := List[List[call[null UnresolvedType(String, unresolved)(-{ ""this"" }- String)], UnresolvedInstruction('+', unresolved), call[null UnresolvedType(String, unresolved)(-{ ""\n"" }- String)]], UnresolvedInstruction('print', unresolved)]) needs solving.
     [java]                                                                       /----Solving List[List[call[null UnresolvedType(String, unresolved)(-{ ""this"" }- String)], UnresolvedInstruction('+', unresolved), call[null UnresolvedType(String, unresolved)(-{ ""\n"" }- String)]], UnresolvedInstruction('print', unresolved)]
     [java]                                                                           /----Solving List[call[null UnresolvedType(String, unresolved)(-{ ""this"" }- String)], UnresolvedInstruction('+', unresolved), call[null UnresolvedType(String, unresolved)(-{ ""\n"" }- String)]]
     [java]                                                                                 Checking Type UnresolvedType(String, unresolved)...                                                                                 resolved to (String [(java.lang.String -> self)] := -{ this }- String).
     [java]                                                                             0. child call[null (String [(java.lang.String -> self)] := -{ this }- String)(-{ ""this"" }- String)]
     [java]                                                                               Next is a function (String [(java.lang.String -> self)] := -{ this }- String)
     [java]                                                                               with parameters _{java.lang.String}_.
     [java]                                                                               1. child call[(println [( -> void)] := List[List[call[null (String [(java.lang.String -> self)] := -{ this }- String)(-{ ""this"" }- String)], UnresolvedInstruction('+', unresolved), call[null UnresolvedType(String, unresolved)(-{ ""\n"" }- String)]], UnresolvedInstruction('print', unresolved)]) (+ [(String -> String)] := -{ this }- +)()]
     [java]                                                                                 check, 0 < 1
     [java]                                                                                 (String [(java.lang.String -> self)] := -{ this }- String) doesn't match as parameterType, _{java.lang.String}_ expected.
     [java]                                                                                 Parametercheck failed, backtracking to 1...
     [java]                                                                                 1. child call[(println [( -> void)] := List[List[call[null (String [(java.lang.String -> self)] := -{ this }- String)(-{ ""this"" }- String)], UnresolvedInstruction('+', unresolved), call[null UnresolvedType(String, unresolved)(-{ ""\n"" }- String)]], UnresolvedInstruction('print', unresolved)]) (+ [(String -> String)] := -{ this }- +)()]
     [java]                                                                                   no check, 0 < 1
     [java]                                                                                     Checking Type UnresolvedType(String, unresolved)...                                                                                     resolved to (String [(java.lang.String -> self)] := -{ this }- String).
     [java]                                                                                 2. child call[null (String [(java.lang.String -> self)] := -{ this }- String)(-{ ""\n"" }- String)]
     [java]                                                                                   check, 1 < 1
     [java]                                                                               adding call[null (String [(java.lang.String -> self)] := -{ this }- String)(-{ ""\n"" }- String)] to result.
     [java]                                                                               ----/Result: call[null (String [(java.lang.String -> self)] := -{ this }- String)(-{ ""\n"" }- String)]
     [java]                                                                               0. child call[null (String [(java.lang.String -> self)] := -{ this }- String)(-{ ""\n"" }- String)]
     [java]                                                                                 Next is a function (String [(java.lang.String -> self)] := -{ this }- String)
     [java]                                                                                 with parameters _{java.lang.String}_.
     [java]                                                                                 1. child call[(println [( -> void)] := List[List[call[null (String [(java.lang.String -> self)] := -{ this }- String)(-{ ""this"" }- String)], UnresolvedInstruction('+', unresolved), call[null (String [(java.lang.String -> self)] := -{ this }- String)(-{ ""\n"" }- String)]], UnresolvedInstruction('print', unresolved)]) (print [( -> void)] := -{ this }- print)()]
     [java]                                                                                   check, 0 < 1
     [java]                                                                                   (void) doesn't match as parameterType, _{java.lang.String}_ expected.
     [java]                                                                                   Parametercheck failed, backtracking to 1...
     [java]                                                                                   1. child call[(println [( -> void)] := List[List[call[null (String [(java.lang.String -> self)] := -{ this }- String)(-{ ""this"" }- String)], UnresolvedInstruction('+', unresolved), call[null (String [(java.lang.String -> self)] := -{ this }- String)(-{ ""\n"" }- String)]], UnresolvedInstruction('print', unresolved)]) (print [( -> void)] := -{ this }- print)()]
     [java]                                                                                     no check, 0 < 1
     [java]                                                                                 adding call[(println [( -> void)] := List[List[call[null (String [(java.lang.String -> self)] := -{ this }- String)(-{ ""this"" }- String)], UnresolvedInstruction('+', unresolved), call[null (String [(java.lang.String -> self)] := -{ this }- String)(-{ ""\n"" }- String)]], UnresolvedInstruction('print', unresolved)]) (print [( -> void)] := -{ this }- print)()] to result.
     [java]                                                                                 ----/Result: call[(println [( -> void)] := List[List[call[null (String [(java.lang.String -> self)] := -{ this }- String)(-{ ""this"" }- String)], UnresolvedInstruction('+', unresolved), call[null (String [(java.lang.String -> self)] := -{ this }- String)(-{ ""\n"" }- String)]], UnresolvedInstruction('print', unresolved)]) (print [( -> void)] := -{ this }- print)()]
     [java]                                                                                 Solved to call[(println [( -> void)] := List[List[call[null (String [(java.lang.String -> self)] := -{ this }- String)(-{ ""this"" }- String)], UnresolvedInstruction('+', unresolved), call[null (String [(java.lang.String -> self)] := -{ this }- String)(-{ ""\n"" }- String)]], UnresolvedInstruction('print', unresolved)]) (print [( -> void)] := -{ this }- print)()]
     [java]                                                                                   Instruction -{ this }- println in (SelfType[println]) needs solving.
     [java]                                                                                   Solved to -{ this }- println
     [java]                                                                                     Instruction -{ this }- in (SelfType[( -> void)]) needs solving.
     [java]                                                                                         Checking Type (( -> void))...                                                                                         already resolved.
     [java]                                                                                     Solved to -{ this }-
     [java]                                                                           Instruction -{ this }- toString in (SelfType[toString]) needs solving.
     [java]                                                                           Solved to -{ this }- toString
     [java]                                                                             Instruction -{ this }- in (SelfType[( -> String)]) needs solving.
     [java]                                                                                 Checking Type (( -> String))...                                                                                 already resolved.
     [java]                                                                             Solved to -{ this }-
     [java]                                                                   Instruction -{ this }- < in (SelfType[<]) needs solving.
     [java]                                                                   Solved to -{ this }- <
     [java]                                                                     Instruction -{ this }- in (SelfType[(Int -> Boolean)]) needs solving.
     [java]                                                                         Checking Type ((Int -> Boolean))...                                                                         already resolved.
     [java]                                                                     Solved to -{ this }-
     [java]                                                                 Instruction -{ value;  }- in (toInt [( -> java.lang.Integer)] := -{ value;  }-) needs solving.
     [java]                                                                 Solved to -{ value;  }-
     [java]                                                                   Instruction null in _{java.lang.Integer}_ needs solving.
     [java]                                                                   Solved to null
     [java]                                                                     Instruction -{ this }- in (SelfType[java.lang.Integer]) needs solving.
     [java]                                                                     Solved to -{ this }-
     [java]                                                                   Instruction -{ this }- toInt in (SelfType[toInt]) needs solving.
     [java]                                                                   Solved to -{ this }- toInt
     [java]                                                                     Instruction -{ this }- in (SelfType[( -> java.lang.Integer)]) needs solving.
     [java]                                                                         Checking Type (( -> java.lang.Integer))...                                                                         already resolved.
     [java]                                                                     Solved to -{ this }-
     [java]                                                                 Instruction List[UnresolvedInstruction('String', unresolved), -{ java.lang.String.valueOf(value... }-] in (toString [( -> String)] := List[UnresolvedInstruction('String', unresolved), -{ java.lang.String.valueOf(value... }-]) needs solving.
     [java]                                                                   /----Solving List[UnresolvedInstruction('String', unresolved), -{ java.lang.String.valueOf(value... }-]
     [java]                                                                       0. child call[(toString [( -> String)] := List[UnresolvedInstruction('String', unresolved), -{ java.lang.String.valueOf(value... }-]) (String [(java.lang.String -> self)] := -{ this }- String)()]
     [java]                                                                         Next is a function (String [(java.lang.String -> self)] := -{ this }- String)
     [java]                                                                         with parameters _{java.lang.String}_.
     [java]                                                                       1. child -{ java.lang.String.valueOf(value... }-
     [java]                                                                         check, 0 < 1
     [java]                                                                         -{ java.lang.String.valueOf(value... }- is parameter.
     [java]                                                                         Function call to (String [(java.lang.String -> self)] := -{ this }- String) complete.
     [java]                                                                         Next is a function (String [(java.lang.String -> self)] := -{ this }- String)
     [java]                                                                         with parameters _{java.lang.String}_.
     [java]                                                                         lastFunctionCall = call[(toString [( -> String)] := List[UnresolvedInstruction('String', unresolved), -{ java.lang.String.valueOf(value... }-]) (String [(java.lang.String -> self)] := -{ this }- String)(-{ java.lang.String.valueOf(value... }-)]
     [java]                                                                     adding call[(toString [( -> String)] := List[UnresolvedInstruction('String', unresolved), -{ java.lang.String.valueOf(value... }-]) (String [(java.lang.String -> self)] := -{ this }- String)(-{ java.lang.String.valueOf(value... }-)] to result.
     [java]                                                                     ----/Result: call[(toString [( -> String)] := List[UnresolvedInstruction('String', unresolved), -{ java.lang.String.valueOf(value... }-]) (String [(java.lang.String -> self)] := -{ this }- String)(-{ java.lang.String.valueOf(value... }-)]
     [java]                                                                     Solved to call[(toString [( -> String)] := List[UnresolvedInstruction('String', unresolved), -{ java.lang.String.valueOf(value... }-]) (String [(java.lang.String -> self)] := -{ this }- String)(-{ java.lang.String.valueOf(value... }-)]
     [java]                                                                       Instruction -{ this }- toString in (SelfType[toString]) needs solving.
     [java]                                                                       Solved to -{ this }- toString
     [java]                                                                         Instruction -{ this }- in (SelfType[( -> String)]) needs solving.
     [java]                                                                             Checking Type (( -> String))...                                                                             already resolved.
     [java]                                                                         Solved to -{ this }-
     [java]                                                               Instruction null in _{java.lang.Object}_ needs solving.
     [java]                                                               Solved to null
     [java]                                                                 Instruction -{ this }- in (SelfType[java.lang.Object]) needs solving.
     [java]                                                                 Solved to -{ this }-
     [java]                                                               Instruction -{ this }- get in (SelfType[get]) needs solving.
     [java]                                                               Solved to -{ this }- get
     [java]                                                                 Instruction -{ this }- in (SelfType[(Int -> java.lang.Object)]) needs solving.
     [java]                                                                     Checking Type ((Int -> java.lang.Object))...                                                                     already resolved.
     [java]                                                                 Solved to -{ this }-
     [java]                                                       Instruction -{ 
     [java]         while (condition._hl... }- void in (while [(( -> Boolean) ( -> void) -> void)] := -{         while (condition._hl... }- void) needs solving.                                                          Checking Type UnresolvedType(void, unresolved)...                                                           resolved to (void).
     [java]                                                       Solved to -{ 
     [java]         while (condition._hl... }- void                                                        Instruction null in (( -> Boolean)) needs solving.
     [java]                                                         Solved to null
     [java]                                                           Instruction -{ this }- in (SelfType[( -> Boolean)]) needs solving.
     [java]                                                           Solved to -{ this }-
     [java]                                                         Instruction null in (( -> void)) needs solving.
     [java]                                                         Solved to null
     [java]                                                           Instruction -{ this }- in (SelfType[( -> void)]) needs solving.
     [java]                                                           Solved to -{ this }-
     [java]                                                         Instruction -{ this }- while in (SelfType[while]) needs solving.
     [java]                                                         Solved to -{ this }- while
     [java]                                                           Instruction -{ this }- in (SelfType[(( -> Boolean) ( -> void) -> void)]) needs solving.
     [java]                                                               Checking Type ((( -> Boolean) ( -> void) -> void))...                                                               already resolved.
     [java]                                                           Solved to -{ this }-
     [java]                                                       Instruction VoidInstruction in (MyNamespace [( -> self)] := VoidInstruction) needs solving.
     [java]                                                           Checking Type UnresolvedType(void, unresolved)...                                                           resolved to (void).
     [java]                                                       Solved to VoidInstruction
     [java]                                                         Instruction -{ this }- MyNamespace in (SelfType[MyNamespace]) needs solving.
     [java]                                                         Solved to -{ this }- MyNamespace
     [java]                                                           Instruction -{ this }- in (SelfType[( -> MyNamespace)]) needs solving.
     [java]                                                               Checking Type (( -> MyNamespace))...                                                               already resolved.
     [java]                                                           Solved to -{ this }-
     [java]                                                             Instruction VoidInstruction in (HelloWorldClass [( -> self)] := VoidInstruction) needs solving.
     [java]                                                                 Checking Type UnresolvedType(void, unresolved)...                                                                 resolved to (void).
     [java]                                                             Solved to VoidInstruction
     [java]                                                               Instruction -{ this }- HelloWorldClass in (SelfType[HelloWorldClass]) needs solving.
     [java]                                                               Solved to -{ this }- HelloWorldClass
     [java]                                                                 Instruction -{ this }- in (SelfType[( -> HelloWorldClass)]) needs solving.
     [java]                                                                     Checking Type (( -> HelloWorldClass))...                                                                     already resolved.
     [java]                                                                 Solved to -{ this }-
     [java]                                                                   Instruction call[null UnresolvedType(Int, unresolved)(-{ 5 }- Int)] in (count [ Int] := call[null UnresolvedType(Int, unresolved)(-{ 5 }- Int)]) needs solving.
     [java]                                                                       Checking Type UnresolvedType(Int, unresolved)...                                                                       resolved to (Int [(int -> self)] := -{ this }- Int).
     [java]                                                                   Solved to call[null (Int [(int -> self)] := -{ this }- Int)(-{ 5 }- Int)]
     [java]                                                                     Instruction -{ this }- count in (SelfType[count]) needs solving.
     [java]                                                                     Solved to -{ this }- count
     [java]                                                                       Instruction -{ this }- in (SelfType[ Int]) needs solving.
     [java]                                                                           Checking Type ( Int)...                                                                           already resolved.
     [java]                                                                       Solved to -{ this }-
     [java]                                                                   Instruction call[null UnresolvedType(Int, unresolved)(-{ 0 }- Int)] in (foo [ Int] := call[null UnresolvedType(Int, unresolved)(-{ 0 }- Int)]) needs solving.
     [java]                                                                       Checking Type UnresolvedType(Int, unresolved)...                                                                       resolved to (Int [(int -> self)] := -{ this }- Int).
     [java]                                                                   Solved to call[null (Int [(int -> self)] := -{ this }- Int)(-{ 0 }- Int)]
     [java]                                                                     Instruction -{ this }- foo in (SelfType[foo]) needs solving.
     [java]                                                                     Solved to -{ this }- foo
     [java]                                                                       Instruction -{ this }- in (SelfType[ Int]) needs solving.
     [java]                                                                           Checking Type ( Int)...                                                                           already resolved.
     [java]                                                                       Solved to -{ this }-
     [java]                                                                   Instruction call[null UnresolvedType(Int, unresolved)(-{ 3 }- Int)] in (bar [ Int] := call[null UnresolvedType(Int, unresolved)(-{ 3 }- Int)]) needs solving.
     [java]                                                                       Checking Type UnresolvedType(Int, unresolved)...                                                                       resolved to (Int [(int -> self)] := -{ this }- Int).
     [java]                                                                   Solved to call[null (Int [(int -> self)] := -{ this }- Int)(-{ 3 }- Int)]
     [java]                                                                     Instruction -{ this }- bar in (SelfType[bar]) needs solving.
     [java]                                                                     Solved to -{ this }- bar
     [java]                                                                       Instruction -{ this }- in (SelfType[ Int]) needs solving.
     [java]                                                                           Checking Type ( Int)...                                                                           already resolved.
     [java]                                                                       Solved to -{ this }-
     [java]                                                                   Instruction List[UnresolvedInstruction('foo', unresolved), UnresolvedInstruction('+', unresolved), UnresolvedInstruction('bar', unresolved)] in (bla [ Int] := List[UnresolvedInstruction('foo', unresolved), UnresolvedInstruction('+', unresolved), UnresolvedInstruction('bar', unresolved)]) needs solving.
     [java]                                                                     /----Solving List[UnresolvedInstruction('foo', unresolved), UnresolvedInstruction('+', unresolved), UnresolvedInstruction('bar', unresolved)]
     [java]                                                                         0. child call[(bla [ Int] := List[UnresolvedInstruction('foo', unresolved), UnresolvedInstruction('+', unresolved), UnresolvedInstruction('bar', unresolved)]) (foo [ Int] := -{ this }- foo)()]
     [java]                                                                           Next is a function (Int [(int -> self)] := -{ this }- Int)
     [java]                                                                           with parameters _{int}_.
     [java] (bla [ Int] := List[UnresolvedInstruction('foo', unresolved), UnresolvedInstruction('+', unresolved), UnresolvedInstruction('bar', unresolved)])
     [java]   (SelfType[bla])
     [java]   (SelfType[ Int])
     [java] de.haukerehfeld.hlisp.semantics.SemanticException: Couldn't resolve identifier + in scope (bla [ Int] := List[UnresolvedInstruction('foo', unresolved), UnresolvedInstruction('+', unresolved), UnresolvedInstruction('bar', unresolved)])
     [java] 	at de.haukerehfeld.hlisp.semantics.Resolver.solve(Resolver.java:137)
     [java] 	at de.haukerehfeld.hlisp.semantics.ListInstructionResolver.solve(ListInstructionResolver.java:105)
     [java] 	at de.haukerehfeld.hlisp.semantics.Resolver.solve(Resolver.java:164)
     [java] 	at de.haukerehfeld.hlisp.semantics.Resolver.solve(Resolver.java:131)
     [java] 	at de.haukerehfeld.hlisp.semantics.Resolver.solveInstructions(Resolver.java:117)
     [java] 	at de.haukerehfeld.hlisp.semantics.Resolver.solveInstructions(Resolver.java:123)
     [java] 	at de.haukerehfeld.hlisp.semantics.Resolver.solveInstructions(Resolver.java:123)
     [java] 	at de.haukerehfeld.hlisp.semantics.Resolver.solveInstructions(Resolver.java:123)
     [java] 	at de.haukerehfeld.hlisp.semantics.Resolver.solveInstructions(Resolver.java:123)
     [java] 	at de.haukerehfeld.hlisp.semantics.Resolver.solveInstructions(Resolver.java:123)
     [java] 	at de.haukerehfeld.hlisp.semantics.Resolver.solveInstructions(Resolver.java:123)
     [java] 	at de.haukerehfeld.hlisp.semantics.Resolver.solveInstructions(Resolver.java:123)
     [java] 	at de.haukerehfeld.hlisp.semantics.Resolver.solveInstructions(Resolver.java:123)
     [java] 	at de.haukerehfeld.hlisp.semantics.Resolver.solve(Resolver.java:40)
     [java] 	at de.haukerehfeld.hlisp.Lisp.run(Lisp.java:44)
     [java] 	at de.haukerehfeld.hlisp.Lisp.main(Lisp.java:14)

BUILD SUCCESSFUL
Total time: 1 second
