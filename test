Buildfile: build.xml

compile:
   [javacc] Java Compiler Compiler Version 5.0 (Parser Generator)
   [javacc] (type "javacc" with no arguments for help)
   [javacc] Reading from file V:\Programming\lisp\tmp\de\haukerehfeld\hlisp\parser\HLisp.jj . . .
   [javacc] Note: UNICODE_INPUT option is specified. Please make sure you create the parser/lexer using a Reader with the correct character encoding.
   [javacc] File "TokenMgrError.java" is being rebuilt.
   [javacc] File "ParseException.java" is being rebuilt.
   [javacc] File "Token.java" is being rebuilt.
   [javacc] File "SimpleCharStream.java" is being rebuilt.
   [javacc] Parser generated with 0 errors and 1 warnings.
    [javac] Compiling 7 source files to V:\Programming\lisp\bin

run:
     [java] AstRoot
     [java]  AstDefine
     [java]   AstIdentifier = 'List'
     [java]   AstLambdaExpression
     [java]    AstFunctionType
     [java]     AstFunctionSymbol
     [java]     AstType
     [java]      AstSimpleType
     [java]       AstIdentifier = 'this'
     [java]    AstFunctionParameters
     [java]     AstFunctionSymbol
     [java]    AstBody
     [java]     AstDefine
     [java]      AstIdentifier = 'list'
     [java]      AstVariable
     [java]       AstSimpleType
     [java]        AstNativeType = 'java.util.ArrayList'
     [java]       AstBody
     [java]        AstNativeCodeBlock = 'new java.util.ArrayList(); '
     [java]         AstType
     [java]          AstSimpleType
     [java]           AstNativeType = 'java.util.ArrayList'
     [java]     AstDefine
     [java]      AstIdentifier = '+='
     [java]      AstLambdaExpression
     [java]       AstFunctionType
     [java]        AstType
     [java]         AstSimpleType
     [java]          AstIdentifier = '_'
     [java]        AstFunctionSymbol
     [java]        AstType
     [java]         AstSimpleType
     [java]          AstIdentifier = 'List'
     [java]       AstFunctionParameters
     [java]        AstIdentifier = 'element'
     [java]        AstFunctionSymbol
     [java]       AstBody
     [java]        AstList
     [java]         AstNativeCodeBlock = 'list.add(element); '
     [java]          AstType
     [java]           AstSimpleType
     [java]            AstIdentifier = 'void'
     [java]        AstList
     [java]         AstIdentifier = 'List'
     [java]         AstIdentifier = 'this'
     [java]     AstDefine
     [java]      AstIdentifier = 'get'
     [java]      AstLambdaExpression
     [java]       AstFunctionType
     [java]        AstType
     [java]         AstSimpleType
     [java]          AstIdentifier = 'Int'
     [java]        AstFunctionSymbol
     [java]        AstType
     [java]         AstSimpleType
     [java]          AstNativeType = 'java.lang.Object'
     [java]       AstFunctionParameters
     [java]        AstIdentifier = 'i'
     [java]        AstFunctionSymbol
     [java]       AstBody
     [java]        AstNativeCodeBlock = 'list.get(i.toInt()._hlisp_run()); '
     [java]         AstType
     [java]          AstSimpleType
     [java]           AstNativeType = 'java.lang.Object'
     [java]     AstIdentifier = 'this'
     [java]  AstDefine
     [java]   AstIdentifier = 'while'
     [java]   AstLambdaExpression
     [java]    AstFunctionType
     [java]     AstType
     [java]      AstFunctionType
     [java]       AstFunctionSymbol
     [java]       AstType
     [java]        AstSimpleType
     [java]         AstIdentifier = 'Boolean'
     [java]     AstType
     [java]      AstFunctionType
     [java]       AstFunctionSymbol
     [java]     AstFunctionSymbol
     [java]    AstFunctionParameters
     [java]     AstIdentifier = 'condition'
     [java]     AstIdentifier = 'body'
     [java]     AstFunctionSymbol
     [java]    AstBody
     [java]     AstNativeCodeBlock = ' while (condition._hlisp_run().toBoolean()._hlisp_run()) {
     [java]             body._hlisp_run();
     [java]         }
     [java]     '
     [java]      AstType
     [java]       AstSimpleType
     [java]        AstIdentifier = 'void'
     [java]     AstIdentifier = 'void'
     [java]  AstDefine
     [java]   AstIdentifier = 'Int'
     [java]   AstLambdaExpression
     [java]    AstFunctionType
     [java]     AstType
     [java]      AstSimpleType
     [java]       AstNativeType = 'int'
     [java]     AstFunctionSymbol
     [java]     AstType
     [java]      AstSimpleType
     [java]       AstIdentifier = 'this'
     [java]    AstFunctionParameters
     [java]     AstIdentifier = 'value'
     [java]     AstFunctionSymbol
     [java]    AstBody
     [java]     AstDefine
     [java]      AstIdentifier = '+'
     [java]      AstLambdaExpression
     [java]       AstFunctionType
     [java]        AstType
     [java]         AstSimpleType
     [java]          AstIdentifier = 'Int'
     [java]        AstFunctionSymbol
     [java]        AstType
     [java]         AstSimpleType
     [java]          AstIdentifier = 'Int'
     [java]       AstFunctionParameters
     [java]        AstIdentifier = 'other'
     [java]        AstFunctionSymbol
     [java]       AstBody
     [java]        AstIdentifier = 'Int'
     [java]        AstNativeCodeBlock = 'value + other.value '
     [java]         AstType
     [java]          AstSimpleType
     [java]           AstNativeType = 'int'
     [java]     AstDefine
     [java]      AstIdentifier = '*'
     [java]      AstLambdaExpression
     [java]       AstFunctionType
     [java]        AstType
     [java]         AstSimpleType
     [java]          AstIdentifier = 'Int'
     [java]        AstFunctionSymbol
     [java]        AstType
     [java]         AstSimpleType
     [java]          AstIdentifier = 'Int'
     [java]       AstFunctionParameters
     [java]        AstIdentifier = 'other'
     [java]        AstFunctionSymbol
     [java]       AstBody
     [java]        AstIdentifier = 'Int'
     [java]        AstNativeCodeBlock = 'value * other.value '
     [java]         AstType
     [java]          AstSimpleType
     [java]           AstNativeType = 'int'
     [java]     AstDefine
     [java]      AstIdentifier = '++'
     [java]      AstLambdaExpression
     [java]       AstFunctionType
     [java]        AstFunctionSymbol
     [java]       AstFunctionParameters
     [java]        AstFunctionSymbol
     [java]       AstBody
     [java]        AstList
     [java]         AstNativeCodeBlock = 'value++;'
     [java]          AstType
     [java]           AstSimpleType
     [java]            AstIdentifier = 'void'
     [java]     AstDefine
     [java]      AstIdentifier = '<'
     [java]      AstLambdaExpression
     [java]       AstFunctionType
     [java]        AstType
     [java]         AstSimpleType
     [java]          AstIdentifier = 'Int'
     [java]        AstFunctionSymbol
     [java]        AstType
     [java]         AstSimpleType
     [java]          AstIdentifier = 'Boolean'
     [java]       AstFunctionParameters
     [java]        AstIdentifier = 'other'
     [java]        AstFunctionSymbol
     [java]       AstBody
     [java]        AstIdentifier = 'Boolean'
     [java]        AstNativeCodeBlock = 'value < other.value'
     [java]         AstType
     [java]          AstSimpleType
     [java]           AstNativeType = 'boolean'
     [java]     AstDefine
     [java]      AstIdentifier = 'toInt'
     [java]      AstLambdaExpression
     [java]       AstFunctionType
     [java]        AstFunctionSymbol
     [java]        AstType
     [java]         AstSimpleType
     [java]          AstNativeType = 'java.lang.Integer'
     [java]       AstFunctionParameters
     [java]        AstFunctionSymbol
     [java]       AstBody
     [java]        AstNativeCodeBlock = 'return value; '
     [java]         AstType
     [java]          AstSimpleType
     [java]           AstNativeType = 'java.lang.Integer'
     [java]     AstDefine
     [java]      AstIdentifier = 'toString'
     [java]      AstLambdaExpression
     [java]       AstFunctionType
     [java]        AstFunctionSymbol
     [java]        AstType
     [java]         AstSimpleType
     [java]          AstIdentifier = 'String'
     [java]       AstFunctionParameters
     [java]        AstFunctionSymbol
     [java]       AstBody
     [java]        AstList
     [java]         AstIdentifier = 'String'
     [java]         AstNativeCodeBlock = 'java.lang.String.valueOf(value) '
     [java]          AstType
     [java]           AstSimpleType
     [java]            AstNativeType = 'java.lang.String'
     [java]     AstIdentifier = 'this'
     [java]  AstDefine
     [java]   AstIdentifier = 'Boolean'
     [java]   AstLambdaExpression
     [java]    AstFunctionType
     [java]     AstType
     [java]      AstSimpleType
     [java]       AstNativeType = 'boolean'
     [java]     AstFunctionSymbol
     [java]     AstType
     [java]      AstSimpleType
     [java]       AstIdentifier = 'this'
     [java]    AstFunctionParameters
     [java]     AstIdentifier = 'value'
     [java]     AstFunctionSymbol
     [java]    AstBody
     [java]     AstDefine
     [java]      AstIdentifier = '!'
     [java]      AstLambdaExpression
     [java]       AstFunctionType
     [java]        AstFunctionSymbol
     [java]        AstType
     [java]         AstSimpleType
     [java]          AstIdentifier = 'Boolean'
     [java]       AstFunctionParameters
     [java]        AstFunctionSymbol
     [java]       AstBody
     [java]        AstIdentifier = 'Boolean'
     [java]        AstNativeCodeBlock = '!value '
     [java]         AstType
     [java]          AstSimpleType
     [java]           AstNativeType = 'boolean'
     [java]     AstDefine
     [java]      AstIdentifier = 'toString'
     [java]      AstLambdaExpression
     [java]       AstFunctionType
     [java]        AstFunctionSymbol
     [java]        AstType
     [java]         AstSimpleType
     [java]          AstIdentifier = 'String'
     [java]       AstFunctionParameters
     [java]        AstFunctionSymbol
     [java]       AstBody
     [java]        AstList
     [java]         AstIdentifier = 'String'
     [java]         AstNativeCodeBlock = 'java.lang.Boolean.toString(value) '
     [java]          AstType
     [java]           AstSimpleType
     [java]            AstNativeType = 'java.lang.String'
     [java]     AstDefine
     [java]      AstIdentifier = 'toBoolean'
     [java]      AstLambdaExpression
     [java]       AstFunctionType
     [java]        AstFunctionSymbol
     [java]        AstType
     [java]         AstSimpleType
     [java]          AstNativeType = 'boolean'
     [java]       AstFunctionParameters
     [java]        AstFunctionSymbol
     [java]       AstBody
     [java]        AstNativeCodeBlock = 'return value; '
     [java]         AstType
     [java]          AstSimpleType
     [java]           AstNativeType = 'boolean'
     [java]     AstIdentifier = 'this'
     [java]  AstDefine
     [java]   AstIdentifier = 'String'
     [java]   AstLambdaExpression
     [java]    AstFunctionType
     [java]     AstType
     [java]      AstSimpleType
     [java]       AstNativeType = 'java.lang.String'
     [java]     AstFunctionSymbol
     [java]     AstType
     [java]      AstSimpleType
     [java]       AstIdentifier = 'this'
     [java]    AstFunctionParameters
     [java]     AstIdentifier = 'value'
     [java]     AstFunctionSymbol
     [java]    AstBody
     [java]     AstIdentifier = 'this'
     [java]     AstDefine
     [java]      AstIdentifier = '+'
     [java]      AstLambdaExpression
     [java]       AstFunctionType
     [java]        AstType
     [java]         AstSimpleType
     [java]          AstIdentifier = 'String'
     [java]        AstFunctionSymbol
     [java]        AstType
     [java]         AstSimpleType
     [java]          AstIdentifier = 'String'
     [java]       AstFunctionParameters
     [java]        AstIdentifier = 'other'
     [java]        AstFunctionSymbol
     [java]       AstBody
     [java]        AstList
     [java]         AstIdentifier = 'String'
     [java]         AstNativeCodeBlock = 'value + other.value '
     [java]          AstType
     [java]           AstSimpleType
     [java]            AstNativeType = 'java.lang.String'
     [java]     AstDefine
     [java]      AstIdentifier = 'print'
     [java]      AstLambdaExpression
     [java]       AstFunctionType
     [java]        AstFunctionSymbol
     [java]       AstFunctionParameters
     [java]        AstFunctionSymbol
     [java]       AstBody
     [java]        AstNativeCodeBlock = 'System.out.print(value); '
     [java]         AstType
     [java]          AstSimpleType
     [java]           AstIdentifier = 'void'
     [java]     AstDefine
     [java]      AstIdentifier = 'println'
     [java]      AstLambdaExpression
     [java]       AstFunctionType
     [java]        AstFunctionSymbol
     [java]       AstFunctionParameters
     [java]        AstFunctionSymbol
     [java]       AstBody
     [java]        AstList
     [java]         AstList
     [java]          AstIdentifier = 'String'
     [java]          AstIdentifier = 'this'
     [java]         AstIdentifier = '+'
     [java]         AstString = '"\n"'
     [java]        AstIdentifier = 'print'
     [java]  AstDefine
     [java]   AstIdentifier = 'MyNamespace'
     [java]   AstLambdaExpression
     [java]    AstFunctionType
     [java]     AstFunctionSymbol
     [java]    AstFunctionParameters
     [java]     AstFunctionSymbol
     [java]    AstBody
     [java]     AstDefine
     [java]      AstIdentifier = 'HelloWorldClass'
     [java]      AstLambdaExpression
     [java]       AstFunctionType
     [java]        AstFunctionSymbol
     [java]        AstType
     [java]         AstSimpleType
     [java]          AstIdentifier = 'this'
     [java]       AstFunctionParameters
     [java]        AstFunctionSymbol
     [java]       AstBody
     [java]        AstDefine
     [java]         AstIdentifier = 'count'
     [java]         AstVariable
     [java]          AstSimpleType
     [java]           AstIdentifier = 'Int'
     [java]          AstBody
     [java]           AstList
     [java]            AstInteger = '5'
     [java]        AstDefine
     [java]         AstIdentifier = 'foo'
     [java]         AstVariable
     [java]          AstSimpleType
     [java]           AstIdentifier = 'Int'
     [java]          AstBody
     [java]           AstInteger = '0'
     [java]        AstDefine
     [java]         AstIdentifier = 'bar'
     [java]         AstVariable
     [java]          AstSimpleType
     [java]           AstIdentifier = 'Int'
     [java]          AstBody
     [java]           AstInteger = '3'
     [java]        AstDefine
     [java]         AstIdentifier = 'bla'
     [java]         AstVariable
     [java]          AstSimpleType
     [java]           AstIdentifier = 'Int'
     [java]          AstBody
     [java]           AstList
     [java]            AstIdentifier = 'foo'
     [java]            AstIdentifier = '+'
     [java]            AstIdentifier = 'bar'
     [java]        AstDefine
     [java]         AstIdentifier = 'run'
     [java]         AstLambdaExpression
     [java]          AstFunctionType
     [java]           AstFunctionSymbol
     [java]          AstFunctionParameters
     [java]           AstFunctionSymbol
     [java]          AstBody
     [java]           AstList
     [java]            AstList
     [java]             AstString = '"Hello World!"'
     [java]             AstIdentifier = '+'
     [java]             AstList
     [java]              AstIdentifier = 'count'
     [java]              AstIdentifier = 'toString'
     [java]            AstIdentifier = 'print'
     [java]        AstDefine
     [java]         AstIdentifier = 'function'
     [java]         AstLambdaExpression
     [java]          AstFunctionType
     [java]           AstType
     [java]            AstSimpleType
     [java]             AstIdentifier = 'Int'
     [java]           AstType
     [java]            AstSimpleType
     [java]             AstIdentifier = 'Int'
     [java]           AstFunctionSymbol
     [java]           AstType
     [java]            AstSimpleType
     [java]             AstIdentifier = 'Int'
     [java]          AstFunctionParameters
     [java]           AstIdentifier = 'a'
     [java]           AstIdentifier = 'b'
     [java]           AstFunctionSymbol
     [java]          AstBody
     [java]           AstList
     [java]            AstIdentifier = 'a'
     [java]            AstIdentifier = '+'
     [java]            AstIdentifier = 'b'
     [java]        AstIdentifier = 'this'
     [java]     AstDefine
     [java]      AstIdentifier = 'main'
     [java]      AstLambdaExpression
     [java]       AstFunctionType
     [java]        AstType
     [java]         AstSimpleType
     [java]          AstIdentifier = 'Int'
     [java]        AstFunctionSymbol
     [java]        AstType
     [java]         AstFunctionType
     [java]          AstType
     [java]           AstSimpleType
     [java]            AstIdentifier = 'Int'
     [java]          AstType
     [java]           AstSimpleType
     [java]            AstIdentifier = 'Int'
     [java]          AstFunctionSymbol
     [java]          AstType
     [java]           AstSimpleType
     [java]            AstIdentifier = 'Int'
     [java]       AstFunctionParameters
     [java]        AstIdentifier = 'param'
     [java]        AstFunctionSymbol
     [java]       AstBody
     [java]        AstDefine
     [java]         AstIdentifier = 'i'
     [java]         AstVariable
     [java]          AstSimpleType
     [java]           AstIdentifier = 'Int'
     [java]          AstBody
     [java]           AstInteger = '0'
     [java]        AstDefine
     [java]         AstIdentifier = 'eval'
     [java]         AstVariable
     [java]          AstSimpleType
     [java]           AstIdentifier = 'Int'
     [java]          AstBody
     [java]           AstList
     [java]            AstInteger = '5'
     [java]            AstIdentifier = '+'
     [java]            AstList
     [java]             AstIdentifier = 'i'
     [java]             AstIdentifier = '*'
     [java]             AstInteger = '4'
     [java]        AstDefine
     [java]         AstIdentifier = 'error'
     [java]         AstLambdaExpression
     [java]          AstFunctionType
     [java]           AstFunctionSymbol
     [java]           AstType
     [java]            AstSimpleType
     [java]             AstIdentifier = 'Int'
     [java]          AstFunctionParameters
     [java]           AstFunctionSymbol
     [java]          AstBody
     [java]           AstInteger = '0'
     [java]        AstDefine
     [java]         AstIdentifier = 'k'
     [java]         AstVariable
     [java]          AstSimpleType
     [java]           AstIdentifier = 'List'
     [java]          AstBody
     [java]           AstList
     [java]            AstIdentifier = 'List'
     [java]        AstDefine
     [java]         AstIdentifier = 'list'
     [java]         AstVariable
     [java]          AstSimpleType
     [java]           AstIdentifier = 'List'
     [java]          AstBody
     [java]           AstList
     [java]            AstIdentifier = 'List'
     [java]            AstIdentifier = '+='
     [java]            AstString = '"some"'
     [java]            AstIdentifier = '+='
     [java]            AstString = '"elements"'
     [java]        AstDefine
     [java]         AstIdentifier = 'evalFun'
     [java]         AstLambdaExpression
     [java]          AstFunctionType
     [java]           AstFunctionSymbol
     [java]           AstType
     [java]            AstSimpleType
     [java]             AstIdentifier = 'Int'
     [java]          AstFunctionParameters
     [java]           AstFunctionSymbol
     [java]          AstBody
     [java]           AstInteger = '5'
     [java]           AstIdentifier = '+'
     [java]           AstList
     [java]            AstIdentifier = 'i'
     [java]            AstIdentifier = '*'
     [java]            AstInteger = '4'
     [java]        AstDefine
     [java]         AstIdentifier = 'helloClass'
     [java]         AstVariable
     [java]          AstSimpleType
     [java]           AstIdentifier = 'HelloWorldClass'
     [java]          AstBody
     [java]           AstIdentifier = 'HelloWorldClass'
     [java]        AstList
     [java]         AstIdentifier = 'while'
     [java]         AstLambdaExpression
     [java]          AstFunctionType
     [java]           AstFunctionSymbol
     [java]           AstType
     [java]            AstSimpleType
     [java]             AstIdentifier = 'Boolean'
     [java]          AstFunctionParameters
     [java]           AstFunctionSymbol
     [java]          AstBody
     [java]           AstIdentifier = 'i'
     [java]           AstIdentifier = '<'
     [java]           AstInteger = '5'
     [java]         AstLambdaExpression
     [java]          AstFunctionType
     [java]           AstFunctionSymbol
     [java]          AstFunctionParameters
     [java]           AstFunctionSymbol
     [java]          AstBody
     [java]           AstList
     [java]            AstString = '"bla"'
     [java]            AstIdentifier = 'println'
     [java]           AstList
     [java]            AstIdentifier = 'i'
     [java]            AstIdentifier = '++'
     [java]        AstList
     [java]         AstIdentifier = 'while'
     [java]         AstLambdaExpression
     [java]          AstFunctionType
     [java]           AstFunctionSymbol
     [java]           AstType
     [java]            AstSimpleType
     [java]             AstIdentifier = 'Boolean'
     [java]          AstFunctionParameters
     [java]           AstFunctionSymbol
     [java]          AstBody
     [java]           AstIdentifier = 'i'
     [java]           AstIdentifier = '<'
     [java]           AstIdentifier = 'param'
     [java]         AstLambdaExpression
     [java]          AstFunctionType
     [java]           AstFunctionSymbol
     [java]          AstFunctionParameters
     [java]           AstFunctionSymbol
     [java]          AstBody
     [java]           AstList
     [java]            AstString = '"iteration"'
     [java]            AstIdentifier = 'println'
     [java]           AstList
     [java]            AstIdentifier = 'i'
     [java]            AstIdentifier = '++'
     [java]        AstLambdaExpression
     [java]         AstFunctionType
     [java]          AstType
     [java]           AstSimpleType
     [java]            AstIdentifier = 'Int'
     [java]          AstType
     [java]           AstSimpleType
     [java]            AstIdentifier = 'Int'
     [java]          AstFunctionSymbol
     [java]          AstType
     [java]           AstSimpleType
     [java]            AstIdentifier = 'Int'
     [java]         AstFunctionParameters
     [java]          AstIdentifier = 'a'
     [java]          AstIdentifier = 'b'
     [java]          AstFunctionSymbol
     [java]         AstBody
     [java]          AstIdentifier = 'a'
     [java]          AstIdentifier = '+'
     [java]          AstIdentifier = 'b'
     [java]  AstList
     [java]   AstIdentifier = 'MyNamespace'
     [java]   AstIdentifier = 'main'
     [java]   AstInteger = '5'
     [java] Defining Types...
     [java] copying  _{java.util.ArrayList}_.this into list
     [java] defining list in ( -> UnresolvedSignature(this, unresolved))
     [java] Defining instruction List[-{ list.add(element);  }- void, List[UnresolvedInstruction('List'), UnresolvedInstruction('this')]] in (UnresolvedSignature(_, unresolved) -> UnresolvedSignature(List, unresolved))
     [java] copying (UnresolvedSignature(_, unresolved) -> UnresolvedSignature(List, unresolved)).this into +=
     [java] defining += in ( -> UnresolvedSignature(this, unresolved))
     [java] Defining instruction -{ list.get(i.toInt()._hlisp_run(... }- java.lang.Object in (UnresolvedSignature(Int, unresolved) -> _{java.lang.Object}_)
     [java] copying (UnresolvedSignature(Int, unresolved) -> _{java.lang.Object}_).this into get
     [java] defining get in ( -> UnresolvedSignature(this, unresolved))
     [java] Defining instruction UnresolvedInstruction('this') in ( -> UnresolvedSignature(this, unresolved))
     [java] copying ( -> UnresolvedSignature(this, unresolved)).this into List
     [java] copying list into List
     [java] copying += into List
     [java] copying get into List
     [java] defining List in Root
     [java] Defining instruction List[-{  while (condition._hlisp_run()... }- void, UnresolvedInstruction('void')] in (( -> UnresolvedSignature(Boolean, unresolved)) ( -> UnresolvedSignature(void, unresolved)) -> UnresolvedSignature(void, unresolved))
     [java] copying (( -> UnresolvedSignature(Boolean, unresolved)) ( -> UnresolvedSignature(void, unresolved)) -> UnresolvedSignature(void, unresolved)).this into while
     [java] defining while in Root
     [java] Defining instruction List[UnresolvedInstruction('Int'), -{ value + other.value  }- int] in (UnresolvedSignature(Int, unresolved) -> UnresolvedSignature(Int, unresolved))
     [java] copying (UnresolvedSignature(Int, unresolved) -> UnresolvedSignature(Int, unresolved)).this into +
     [java] defining + in (_{int}_ -> UnresolvedSignature(this, unresolved))
     [java] Defining instruction List[UnresolvedInstruction('Int'), -{ value * other.value  }- int] in (UnresolvedSignature(Int, unresolved) -> UnresolvedSignature(Int, unresolved))
     [java] copying (UnresolvedSignature(Int, unresolved) -> UnresolvedSignature(Int, unresolved)).this into *
     [java] defining * in (_{int}_ -> UnresolvedSignature(this, unresolved))
     [java] Defining instruction -{ value++; }- void in ( -> UnresolvedSignature(void, unresolved))
     [java] copying ( -> UnresolvedSignature(void, unresolved)).this into ++
     [java] defining ++ in (_{int}_ -> UnresolvedSignature(this, unresolved))
     [java] Defining instruction List[UnresolvedInstruction('Boolean'), -{ value < other.value }- boolean] in (UnresolvedSignature(Int, unresolved) -> UnresolvedSignature(Boolean, unresolved))
     [java] copying (UnresolvedSignature(Int, unresolved) -> UnresolvedSignature(Boolean, unresolved)).this into <
     [java] defining < in (_{int}_ -> UnresolvedSignature(this, unresolved))
     [java] Defining instruction -{ return value;  }- java.lang.Integer in ( -> _{java.lang.Integer}_)
     [java] copying ( -> _{java.lang.Integer}_).this into toInt
     [java] defining toInt in (_{int}_ -> UnresolvedSignature(this, unresolved))
     [java] Defining instruction List[UnresolvedInstruction('String'), -{ java.lang.String.valueOf(value... }- java.lang.String] in ( -> UnresolvedSignature(String, unresolved))
     [java] copying ( -> UnresolvedSignature(String, unresolved)).this into toString
     [java] defining toString in (_{int}_ -> UnresolvedSignature(this, unresolved))
     [java] Defining instruction UnresolvedInstruction('this') in (_{int}_ -> UnresolvedSignature(this, unresolved))
     [java] copying (_{int}_ -> UnresolvedSignature(this, unresolved)).this into Int
     [java] copying + into Int
     [java] copying * into Int
     [java] copying ++ into Int
     [java] copying < into Int
     [java] copying toInt into Int
     [java] copying toString into Int
     [java] defining Int in Root
     [java] Defining instruction List[UnresolvedInstruction('Boolean'), -{ !value  }- boolean] in ( -> UnresolvedSignature(Boolean, unresolved))
     [java] copying ( -> UnresolvedSignature(Boolean, unresolved)).this into !
     [java] defining ! in (_{boolean}_ -> UnresolvedSignature(this, unresolved))
     [java] Defining instruction List[UnresolvedInstruction('String'), -{ java.lang.Boolean.toString(val... }- java.lang.String] in ( -> UnresolvedSignature(String, unresolved))
     [java] copying ( -> UnresolvedSignature(String, unresolved)).this into toString
     [java] defining toString in (_{boolean}_ -> UnresolvedSignature(this, unresolved))
     [java] Defining instruction -{ return value;  }- boolean in ( -> _{boolean}_)
     [java] copying ( -> _{boolean}_).this into toBoolean
     [java] defining toBoolean in (_{boolean}_ -> UnresolvedSignature(this, unresolved))
     [java] Defining instruction UnresolvedInstruction('this') in (_{boolean}_ -> UnresolvedSignature(this, unresolved))
     [java] copying (_{boolean}_ -> UnresolvedSignature(this, unresolved)).this into Boolean
     [java] copying ! into Boolean
     [java] copying toString into Boolean
     [java] copying toBoolean into Boolean
     [java] defining Boolean in Root
     [java] Defining instruction List[UnresolvedInstruction('String'), -{ value + other.value  }- java.lang.String] in (UnresolvedSignature(String, unresolved) -> UnresolvedSignature(String, unresolved))
     [java] copying (UnresolvedSignature(String, unresolved) -> UnresolvedSignature(String, unresolved)).this into +
     [java] defining + in (_{java.lang.String}_ -> UnresolvedSignature(this, unresolved))
     [java] Defining instruction -{ System.out.print(value);  }- void in ( -> UnresolvedSignature(void, unresolved))
     [java] copying ( -> UnresolvedSignature(void, unresolved)).this into print
     [java] defining print in (_{java.lang.String}_ -> UnresolvedSignature(this, unresolved))
     [java] Defining instruction List[List[List[UnresolvedInstruction('String'), UnresolvedInstruction('this')], UnresolvedInstruction('+'), call__ UnresolvedType(String, unresolved)(-{ "\n" }- String)], UnresolvedInstruction('print')] in ( -> UnresolvedSignature(void, unresolved))
     [java] copying ( -> UnresolvedSignature(void, unresolved)).this into println
     [java] defining println in (_{java.lang.String}_ -> UnresolvedSignature(this, unresolved))
     [java] Defining instruction UnresolvedInstruction('this') in (_{java.lang.String}_ -> UnresolvedSignature(this, unresolved))
     [java] copying (_{java.lang.String}_ -> UnresolvedSignature(this, unresolved)).this into String
     [java] copying + into String
     [java] copying print into String
     [java] copying println into String
     [java] defining String in Root
     [java] copying  UnresolvedSignature(Int, unresolved).this into count
     [java] defining count in ( -> UnresolvedSignature(this, unresolved))
     [java] copying  UnresolvedSignature(Int, unresolved).this into foo
     [java] defining foo in ( -> UnresolvedSignature(this, unresolved))
     [java] copying  UnresolvedSignature(Int, unresolved).this into bar
     [java] defining bar in ( -> UnresolvedSignature(this, unresolved))
     [java] copying  UnresolvedSignature(Int, unresolved).this into bla
     [java] defining bla in ( -> UnresolvedSignature(this, unresolved))
     [java] Defining instruction List[List[call__ UnresolvedType(String, unresolved)(-{ "Hello World!" }- String), UnresolvedInstruction('+'), List[UnresolvedInstruction('count'), UnresolvedInstruction('toString')]], UnresolvedInstruction('print')] in ( -> UnresolvedSignature(void, unresolved))
     [java] copying ( -> UnresolvedSignature(void, unresolved)).this into run
     [java] defining run in ( -> UnresolvedSignature(this, unresolved))
     [java] Defining instruction List[UnresolvedInstruction('a'), UnresolvedInstruction('+'), UnresolvedInstruction('b')] in (UnresolvedSignature(Int, unresolved) UnresolvedSignature(Int, unresolved) -> UnresolvedSignature(Int, unresolved))
     [java] copying (UnresolvedSignature(Int, unresolved) UnresolvedSignature(Int, unresolved) -> UnresolvedSignature(Int, unresolved)).this into function
     [java] defining function in ( -> UnresolvedSignature(this, unresolved))
     [java] Defining instruction UnresolvedInstruction('this') in ( -> UnresolvedSignature(this, unresolved))
     [java] copying ( -> UnresolvedSignature(this, unresolved)).this into HelloWorldClass
     [java] copying count into HelloWorldClass
     [java] copying foo into HelloWorldClass
     [java] copying bar into HelloWorldClass
     [java] copying bla into HelloWorldClass
     [java] copying run into HelloWorldClass
     [java] copying function into HelloWorldClass
     [java] defining HelloWorldClass in ( -> UnresolvedSignature(void, unresolved))
     [java] copying  UnresolvedSignature(Int, unresolved).this into i
     [java] defining i in (UnresolvedSignature(Int, unresolved) -> (UnresolvedSignature(Int, unresolved) UnresolvedSignature(Int, unresolved) -> UnresolvedSignature(Int, unresolved)))
     [java] copying  UnresolvedSignature(Int, unresolved).this into eval
     [java] defining eval in (UnresolvedSignature(Int, unresolved) -> (UnresolvedSignature(Int, unresolved) UnresolvedSignature(Int, unresolved) -> UnresolvedSignature(Int, unresolved)))
     [java] Defining instruction call__ UnresolvedType(Int, unresolved)(-{ 0 }- Int) in ( -> UnresolvedSignature(Int, unresolved))
     [java] copying ( -> UnresolvedSignature(Int, unresolved)).this into error
     [java] defining error in (UnresolvedSignature(Int, unresolved) -> (UnresolvedSignature(Int, unresolved) UnresolvedSignature(Int, unresolved) -> UnresolvedSignature(Int, unresolved)))
     [java] copying  UnresolvedSignature(List, unresolved).this into k
     [java] defining k in (UnresolvedSignature(Int, unresolved) -> (UnresolvedSignature(Int, unresolved) UnresolvedSignature(Int, unresolved) -> UnresolvedSignature(Int, unresolved)))
     [java] copying  UnresolvedSignature(List, unresolved).this into list
     [java] defining list in (UnresolvedSignature(Int, unresolved) -> (UnresolvedSignature(Int, unresolved) UnresolvedSignature(Int, unresolved) -> UnresolvedSignature(Int, unresolved)))
     [java] Defining instruction List[call__ UnresolvedType(Int, unresolved)(-{ 5 }- Int), UnresolvedInstruction('+'), List[UnresolvedInstruction('i'), UnresolvedInstruction('*'), call__ UnresolvedType(Int, unresolved)(-{ 4 }- Int)]] in ( -> UnresolvedSignature(Int, unresolved))
     [java] copying ( -> UnresolvedSignature(Int, unresolved)).this into evalFun
     [java] defining evalFun in (UnresolvedSignature(Int, unresolved) -> (UnresolvedSignature(Int, unresolved) UnresolvedSignature(Int, unresolved) -> UnresolvedSignature(Int, unresolved)))
     [java] copying  UnresolvedSignature(HelloWorldClass, unresolved).this into helloClass
     [java] defining helloClass in (UnresolvedSignature(Int, unresolved) -> (UnresolvedSignature(Int, unresolved) UnresolvedSignature(Int, unresolved) -> UnresolvedSignature(Int, unresolved)))
     [java] Defining instruction List[UnresolvedInstruction('i'), UnresolvedInstruction('<'), call__ UnresolvedType(Int, unresolved)(-{ 5 }- Int)] in ( -> UnresolvedSignature(Boolean, unresolved))
     [java] Defining instruction List[List[call__ UnresolvedType(String, unresolved)(-{ "bla" }- String), UnresolvedInstruction('println')], List[UnresolvedInstruction('i'), UnresolvedInstruction('++')]] in ( -> UnresolvedSignature(void, unresolved))
     [java] Defining instruction List[UnresolvedInstruction('i'), UnresolvedInstruction('<'), UnresolvedInstruction('param')] in ( -> UnresolvedSignature(Boolean, unresolved))
     [java] Defining instruction List[List[call__ UnresolvedType(String, unresolved)(-{ "iteration" }- String), UnresolvedInstruction('println')], List[UnresolvedInstruction('i'), UnresolvedInstruction('++')]] in ( -> UnresolvedSignature(void, unresolved))
     [java] Defining instruction List[UnresolvedInstruction('a'), UnresolvedInstruction('+'), UnresolvedInstruction('b')] in (UnresolvedSignature(Int, unresolved) UnresolvedSignature(Int, unresolved) -> UnresolvedSignature(Int, unresolved))
     [java] Defining instruction List[List[UnresolvedInstruction('while'), lambda__ ( -> UnresolvedSignature(Boolean, unresolved)), lambda__ ( -> UnresolvedSignature(void, unresolved))], List[UnresolvedInstruction('while'), lambda__ ( -> UnresolvedSignature(Boolean, unresolved)), lambda__ ( -> UnresolvedSignature(void, unresolved))], lambda__ (UnresolvedSignature(Int, unresolved) UnresolvedSignature(Int, unresolved) -> UnresolvedSignature(Int, unresolved))] in (UnresolvedSignature(Int, unresolved) -> (UnresolvedSignature(Int, unresolved) UnresolvedSignature(Int, unresolved) -> UnresolvedSignature(Int, unresolved)))
     [java] copying (UnresolvedSignature(Int, unresolved) -> (UnresolvedSignature(Int, unresolved) UnresolvedSignature(Int, unresolved) -> UnresolvedSignature(Int, unresolved))).this into main
     [java] copying i into main
     [java] copying eval into main
     [java] copying error into main
     [java] copying k into main
     [java] copying list into main
     [java] copying evalFun into main
     [java] copying helloClass into main
     [java] defining main in ( -> UnresolvedSignature(void, unresolved))
     [java] Defining instruction void in ( -> UnresolvedSignature(void, unresolved))
     [java] copying ( -> UnresolvedSignature(void, unresolved)).this into MyNamespace
     [java] copying HelloWorldClass into MyNamespace
     [java] copying main into MyNamespace
     [java] defining MyNamespace in Root
     [java] Root (_{java.lang.String[]}_ -> UnresolvedSignature(void, unresolved)) List[-{ List argList = new List();fo... }- void, void]
     [java] parameter args  from Root (null, _{java.lang.String[]}_)
     [java] args (_{java.lang.String[]}_) void
     [java]   args.this (args) -{ this }- args
     [java]   args (_{java.lang.String[]}_) void
     [java]     args.this (args) -{ this }- args
     [java]   Root.this (_{java.lang.String[]}_ -> Root) -{ this }- Root
     [java]   void ( -> void) void
     [java]   List ( -> UnresolvedSignature(this, unresolved)) UnresolvedInstruction('this')
     [java]     List.this ( -> List) -{ this }- List
     [java]     list (_{java.util.ArrayList}_) -{ new java.util.ArrayList();  }- java.util.ArrayList
     [java]       list.this (list) -{ this }- list
     [java]     += (UnresolvedSignature(_, unresolved) -> UnresolvedSignature(List, unresolved)) List[-{ list.add(element);  }- void, List[UnresolvedInstruction('List'), UnresolvedInstruction('this')]]
     [java] parameter element  from += (( -> UnresolvedSignature(this, unresolved)), UnresolvedSignature(_, unresolved))
     [java] element (UnresolvedSignature(_, unresolved)) void
     [java]   element.this (element) -{ this }- element
     [java]       element (UnresolvedSignature(_, unresolved)) void
     [java]         element.this (element) -{ this }- element
     [java]       +=.this (UnresolvedSignature(_, unresolved) -> +=) -{ this }- +=
     [java]     get (UnresolvedSignature(Int, unresolved) -> _{java.lang.Object}_) -{ list.get(i.toInt()._hlisp_run(... }- java.lang.Object
     [java] parameter i  from get (( -> UnresolvedSignature(this, unresolved)), UnresolvedSignature(Int, unresolved))
     [java] i (UnresolvedSignature(Int, unresolved)) void
     [java]   i.this (i) -{ this }- i
     [java]       i (UnresolvedSignature(Int, unresolved)) void
     [java]         i.this (i) -{ this }- i
     [java]       get.this (UnresolvedSignature(Int, unresolved) -> get) -{ this }- get
     [java]   while (( -> UnresolvedSignature(Boolean, unresolved)) ( -> UnresolvedSignature(void, unresolved)) -> UnresolvedSignature(void, unresolved)) List[-{  while (condition._hlisp_run()... }- void, UnresolvedInstruction('void')]
     [java] parameter condition  from while (Root, ( -> UnresolvedSignature(Boolean, unresolved)), ( -> UnresolvedSignature(void, unresolved)))
     [java] condition (( -> UnresolvedSignature(Boolean, unresolved))) void
     [java]   condition.this (condition) -{ this }- condition
     [java]     condition (( -> UnresolvedSignature(Boolean, unresolved))) void
     [java]       condition.this (condition) -{ this }- condition
     [java] parameter body  from while (Root, ( -> UnresolvedSignature(Boolean, unresolved)), ( -> UnresolvedSignature(void, unresolved)))
     [java] body (( -> UnresolvedSignature(void, unresolved))) void
     [java]   body.this (body) -{ this }- body
     [java]     body (( -> UnresolvedSignature(void, unresolved))) void
     [java]       body.this (body) -{ this }- body
     [java]     while.this (( -> UnresolvedSignature(Boolean, unresolved)) ( -> UnresolvedSignature(void, unresolved)) -> while) -{ this }- while
     [java]   Int (_{int}_ -> UnresolvedSignature(this, unresolved)) UnresolvedInstruction('this')
     [java] parameter value  from Int (Root, _{int}_)
     [java] value (_{int}_) void
     [java]   value.this (value) -{ this }- value
     [java]     value (_{int}_) void
     [java]       value.this (value) -{ this }- value
     [java]     Int.this (_{int}_ -> Int) -{ this }- Int
     [java]     + (UnresolvedSignature(Int, unresolved) -> UnresolvedSignature(Int, unresolved)) List[UnresolvedInstruction('Int'), -{ value + other.value  }- int]
     [java] parameter other  from + ((_{int}_ -> UnresolvedSignature(this, unresolved)), UnresolvedSignature(Int, unresolved))
     [java] other (UnresolvedSignature(Int, unresolved)) void
     [java]   other.this (other) -{ this }- other
     [java]       other (UnresolvedSignature(Int, unresolved)) void
     [java]         other.this (other) -{ this }- other
     [java]       +.this (UnresolvedSignature(Int, unresolved) -> +) -{ this }- +
     [java]     * (UnresolvedSignature(Int, unresolved) -> UnresolvedSignature(Int, unresolved)) List[UnresolvedInstruction('Int'), -{ value * other.value  }- int]
     [java] parameter other  from * ((_{int}_ -> UnresolvedSignature(this, unresolved)), UnresolvedSignature(Int, unresolved))
     [java] other (UnresolvedSignature(Int, unresolved)) void
     [java]   other.this (other) -{ this }- other
     [java]       other (UnresolvedSignature(Int, unresolved)) void
     [java]         other.this (other) -{ this }- other
     [java]       *.this (UnresolvedSignature(Int, unresolved) -> *) -{ this }- *
     [java]     ++ ( -> UnresolvedSignature(void, unresolved)) -{ value++; }- void
     [java]       ++.this ( -> ++) -{ this }- ++
     [java]     < (UnresolvedSignature(Int, unresolved) -> UnresolvedSignature(Boolean, unresolved)) List[UnresolvedInstruction('Boolean'), -{ value < other.value }- boolean]
     [java] parameter other  from < ((_{int}_ -> UnresolvedSignature(this, unresolved)), UnresolvedSignature(Int, unresolved))
     [java] other (UnresolvedSignature(Int, unresolved)) void
     [java]   other.this (other) -{ this }- other
     [java]       other (UnresolvedSignature(Int, unresolved)) void
     [java]         other.this (other) -{ this }- other
     [java]       <.this (UnresolvedSignature(Int, unresolved) -> <) -{ this }- <
     [java]     toInt ( -> _{java.lang.Integer}_) -{ return value;  }- java.lang.Integer
     [java]       toInt.this ( -> toInt) -{ this }- toInt
     [java]     toString ( -> UnresolvedSignature(String, unresolved)) List[UnresolvedInstruction('String'), -{ java.lang.String.valueOf(value... }- java.lang.String]
     [java]       toString.this ( -> toString) -{ this }- toString
     [java]   Boolean (_{boolean}_ -> UnresolvedSignature(this, unresolved)) UnresolvedInstruction('this')
     [java] parameter value  from Boolean (Root, _{boolean}_)
     [java] value (_{boolean}_) void
     [java]   value.this (value) -{ this }- value
     [java]     value (_{boolean}_) void
     [java]       value.this (value) -{ this }- value
     [java]     Boolean.this (_{boolean}_ -> Boolean) -{ this }- Boolean
     [java]     ! ( -> UnresolvedSignature(Boolean, unresolved)) List[UnresolvedInstruction('Boolean'), -{ !value  }- boolean]
     [java]       !.this ( -> !) -{ this }- !
     [java]     toString ( -> UnresolvedSignature(String, unresolved)) List[UnresolvedInstruction('String'), -{ java.lang.Boolean.toString(val... }- java.lang.String]
     [java]       toString.this ( -> toString) -{ this }- toString
     [java]     toBoolean ( -> _{boolean}_) -{ return value;  }- boolean
     [java]       toBoolean.this ( -> toBoolean) -{ this }- toBoolean
     [java]   String (_{java.lang.String}_ -> UnresolvedSignature(this, unresolved)) UnresolvedInstruction('this')
     [java] parameter value  from String (Root, _{java.lang.String}_)
     [java] value (_{java.lang.String}_) void
     [java]   value.this (value) -{ this }- value
     [java]     value (_{java.lang.String}_) void
     [java]       value.this (value) -{ this }- value
     [java]     String.this (_{java.lang.String}_ -> String) -{ this }- String
     [java]     + (UnresolvedSignature(String, unresolved) -> UnresolvedSignature(String, unresolved)) List[UnresolvedInstruction('String'), -{ value + other.value  }- java.lang.String]
     [java] parameter other  from + ((_{java.lang.String}_ -> UnresolvedSignature(this, unresolved)), UnresolvedSignature(String, unresolved))
     [java] other (UnresolvedSignature(String, unresolved)) void
     [java]   other.this (other) -{ this }- other
     [java]       other (UnresolvedSignature(String, unresolved)) void
     [java]         other.this (other) -{ this }- other
     [java]       +.this (UnresolvedSignature(String, unresolved) -> +) -{ this }- +
     [java]     print ( -> UnresolvedSignature(void, unresolved)) -{ System.out.print(value);  }- void
     [java]       print.this ( -> print) -{ this }- print
     [java]     println ( -> UnresolvedSignature(void, unresolved)) List[List[List[UnresolvedInstruction('String'), UnresolvedInstruction('this')], UnresolvedInstruction('+'), call__ UnresolvedType(String, unresolved)(-{ "\n" }- String)], UnresolvedInstruction('print')]
     [java]       println.this ( -> println) -{ this }- println
     [java]   MyNamespace ( -> UnresolvedSignature(void, unresolved)) void
     [java]     MyNamespace.this ( -> MyNamespace) -{ this }- MyNamespace
     [java]     HelloWorldClass ( -> UnresolvedSignature(this, unresolved)) UnresolvedInstruction('this')
     [java]       HelloWorldClass.this ( -> HelloWorldClass) -{ this }- HelloWorldClass
     [java]       count (UnresolvedSignature(Int, unresolved)) call__ UnresolvedType(Int, unresolved)(-{ 5 }- Int)
     [java]         count.this (count) -{ this }- count
     [java]       foo (UnresolvedSignature(Int, unresolved)) call__ UnresolvedType(Int, unresolved)(-{ 0 }- Int)
     [java]         foo.this (foo) -{ this }- foo
     [java]       bar (UnresolvedSignature(Int, unresolved)) call__ UnresolvedType(Int, unresolved)(-{ 3 }- Int)
     [java]         bar.this (bar) -{ this }- bar
     [java]       bla (UnresolvedSignature(Int, unresolved)) List[UnresolvedInstruction('foo'), UnresolvedInstruction('+'), UnresolvedInstruction('bar')]
     [java]         bla.this (bla) -{ this }- bla
     [java]       run ( -> UnresolvedSignature(void, unresolved)) List[List[call__ UnresolvedType(String, unresolved)(-{ "Hello World!" }- String), UnresolvedInstruction('+'), List[UnresolvedInstruction('count'), UnresolvedInstruction('toString')]], UnresolvedInstruction('print')]
     [java]         run.this ( -> run) -{ this }- run
     [java]       function (UnresolvedSignature(Int, unresolved) UnresolvedSignature(Int, unresolved) -> UnresolvedSignature(Int, unresolved)) List[UnresolvedInstruction('a'), UnresolvedInstruction('+'), UnresolvedInstruction('b')]
     [java] parameter a  from function (( -> UnresolvedSignature(this, unresolved)), UnresolvedSignature(Int, unresolved), UnresolvedSignature(Int, unresolved))
     [java] a (UnresolvedSignature(Int, unresolved)) void
     [java]   a.this (a) -{ this }- a
     [java]         a (UnresolvedSignature(Int, unresolved)) void
     [java]           a.this (a) -{ this }- a
     [java] parameter b  from function (( -> UnresolvedSignature(this, unresolved)), UnresolvedSignature(Int, unresolved), UnresolvedSignature(Int, unresolved))
     [java] b (UnresolvedSignature(Int, unresolved)) void
     [java]   b.this (b) -{ this }- b
     [java]         b (UnresolvedSignature(Int, unresolved)) void
     [java]           b.this (b) -{ this }- b
     [java]         function.this (UnresolvedSignature(Int, unresolved) UnresolvedSignature(Int, unresolved) -> function) -{ this }- function
     [java]     main (UnresolvedSignature(Int, unresolved) -> (UnresolvedSignature(Int, unresolved) UnresolvedSignature(Int, unresolved) -> UnresolvedSignature(Int, unresolved))) List[List[UnresolvedInstruction('while'), lambda__ ( -> UnresolvedSignature(Boolean, unresolved)), lambda__ ( -> UnresolvedSignature(void, unresolved))], List[UnresolvedInstruction('while'), lambda__ ( -> UnresolvedSignature(Boolean, unresolved)), lambda__ ( -> UnresolvedSignature(void, unresolved))], lambda__ (UnresolvedSignature(Int, unresolved) UnresolvedSignature(Int, unresolved) -> UnresolvedSignature(Int, unresolved))]
     [java] parameter param  from main (( -> UnresolvedSignature(void, unresolved)), UnresolvedSignature(Int, unresolved))
     [java] param (UnresolvedSignature(Int, unresolved)) void
     [java]   param.this (param) -{ this }- param
     [java]       param (UnresolvedSignature(Int, unresolved)) void
     [java]         param.this (param) -{ this }- param
     [java]       main.this (UnresolvedSignature(Int, unresolved) -> main) -{ this }- main
     [java]       i (UnresolvedSignature(Int, unresolved)) call__ UnresolvedType(Int, unresolved)(-{ 0 }- Int)
     [java]         i.this (i) -{ this }- i
     [java]       eval (UnresolvedSignature(Int, unresolved)) List[call__ UnresolvedType(Int, unresolved)(-{ 5 }- Int), UnresolvedInstruction('+'), List[UnresolvedInstruction('i'), UnresolvedInstruction('*'), call__ UnresolvedType(Int, unresolved)(-{ 4 }- Int)]]
     [java]         eval.this (eval) -{ this }- eval
     [java]       error ( -> UnresolvedSignature(Int, unresolved)) call__ UnresolvedType(Int, unresolved)(-{ 0 }- Int)
     [java]         error.this ( -> error) -{ this }- error
     [java]       k (UnresolvedSignature(List, unresolved)) UnresolvedInstruction('List')
     [java]         k.this (k) -{ this }- k
     [java]       list (UnresolvedSignature(List, unresolved)) List[UnresolvedInstruction('List'), UnresolvedInstruction('+='), call__ UnresolvedType(String, unresolved)(-{ "some" }- String), UnresolvedInstruction('+='), call__ UnresolvedType(String, unresolved)(-{ "elements" }- String)]
     [java]         list.this (list) -{ this }- list
     [java]       evalFun ( -> UnresolvedSignature(Int, unresolved)) List[call__ UnresolvedType(Int, unresolved)(-{ 5 }- Int), UnresolvedInstruction('+'), List[UnresolvedInstruction('i'), UnresolvedInstruction('*'), call__ UnresolvedType(Int, unresolved)(-{ 4 }- Int)]]
     [java]         evalFun.this ( -> evalFun) -{ this }- evalFun
     [java]       helloClass (UnresolvedSignature(HelloWorldClass, unresolved)) UnresolvedInstruction('HelloWorldClass')
     [java]         helloClass.this (helloClass) -{ this }- helloClass
     [java] Unresolved types: 
     [java]     
     [java] Unresolved values: 
     [java]     
     [java] ---------- starting resolve iteration ----------
     [java] Checking Signature Root in Root... already resolved.
     [java]   Checking Signature _{java.lang.String[]}_ in Root...   already resolved.
     [java]   Checking Signature void in Root...   already resolved.
     [java]   Checking Signature List in Root...   already resolved.
     [java]     Checking Signature list in List...     already resolved.
     [java]       Checking Signature _{java.util.ArrayList}_ in list...       already resolved.
     [java]     Checking Signature += in List...     already resolved.
     [java]       Checking Signature UnresolvedSignature(_, unresolved) in +=...       resolved to _.
     [java]       Checking Signature UnresolvedSignature(List, unresolved) in +=...       resolved to List.
     [java]         Checking Signature get in List...         already resolved.
     [java]           Checking Signature UnresolvedSignature(Int, unresolved) in get...           resolved to Int.
     [java]             Checking Signature _{int}_ in Int...             already resolved.
     [java]             Checking Signature + in Int...             already resolved.
     [java]               Checking Signature UnresolvedSignature(Int, unresolved) in +...               resolved to Int.
     [java]                 Checking Signature * in Int...                 already resolved.
     [java]                   Checking Signature UnresolvedSignature(Int, unresolved) in *...                   resolved to Int.
     [java]                     Checking Signature ++ in Int...                     already resolved.
     [java]                       Checking Signature UnresolvedSignature(void, unresolved) in ++...                       resolved to void.
     [java]                     Checking Signature < in Int...                     already resolved.
     [java]                       Checking Signature UnresolvedSignature(Int, unresolved) in <...                       resolved to Int.
     [java]                         Checking Signature toInt in Int...                         already resolved.
     [java]                           Checking Signature _{java.lang.Integer}_ in toInt...                           already resolved.
     [java]                         Checking Signature toString in Int...                         already resolved.
     [java]                           Checking Signature UnresolvedSignature(String, unresolved) in toString...                           resolved to String.
     [java]                             Checking Signature _{java.lang.String}_ in String...                             already resolved.
     [java]                             Checking Signature + in String...                             already resolved.
     [java]                               Checking Signature UnresolvedSignature(String, unresolved) in +...                               resolved to String.
     [java]                                 Checking Signature print in String...                                 already resolved.
     [java]                                   Checking Signature UnresolvedSignature(void, unresolved) in print...                                   resolved to void.
     [java]                                 Checking Signature println in String...                                 already resolved.
     [java]                                   Checking Signature UnresolvedSignature(void, unresolved) in println...                                   resolved to void.
     [java]                                 Checking Signature UnresolvedSignature(this, unresolved) in String...                                 resolved to String.
     [java]                               Checking Signature UnresolvedSignature(String, unresolved) in +...                               resolved to String.
     [java]                                 Checking Signature String in String...                                 already resolved.
     [java]                         Checking Signature UnresolvedSignature(this, unresolved) in Int...                         resolved to Int.
     [java]                       Checking Signature UnresolvedSignature(Boolean, unresolved) in <...                       resolved to Boolean.
     [java]                         Checking Signature _{boolean}_ in Boolean...                         already resolved.
     [java]                         Checking Signature ! in Boolean...                         already resolved.
     [java]                           Checking Signature UnresolvedSignature(Boolean, unresolved) in !...                           resolved to Boolean.
     [java]                             Checking Signature toString in Boolean...                             already resolved.
     [java]                               Checking Signature UnresolvedSignature(String, unresolved) in toString...                               resolved to String.
     [java]                             Checking Signature toBoolean in Boolean...                             already resolved.
     [java]                               Checking Signature _{boolean}_ in toBoolean...                               already resolved.
     [java]                             Checking Signature UnresolvedSignature(this, unresolved) in Boolean...                             resolved to Boolean.
     [java]                         Checking Signature Boolean in Boolean...                         already resolved.
     [java]                     Checking Signature Int in Int...                     already resolved.
     [java]                   Checking Signature UnresolvedSignature(Int, unresolved) in *...                   resolved to Int.
     [java]               Checking Signature UnresolvedSignature(Int, unresolved) in +...               resolved to Int.
     [java]           Checking Signature _{java.lang.Object}_ in get...           already resolved.
     [java]         Checking Signature UnresolvedSignature(this, unresolved) in List...         resolved to List.
     [java]   Checking Signature while in Root...   already resolved.
     [java]     Checking Signature ( -> UnresolvedSignature(Boolean, unresolved)) in while...     already resolved.
     [java]       Checking Signature UnresolvedSignature(Boolean, unresolved) in while...       resolved to Boolean.
     [java]     Checking Signature ( -> UnresolvedSignature(void, unresolved)) in while...     already resolved.
     [java]       Checking Signature UnresolvedSignature(void, unresolved) in while...       resolved to void.
     [java]     Checking Signature UnresolvedSignature(void, unresolved) in while...     resolved to void.
     [java]   Checking Signature MyNamespace in Root...   already resolved.
     [java]     Checking Signature HelloWorldClass in MyNamespace...     already resolved.
     [java]       Checking Signature count in HelloWorldClass...       already resolved.
     [java]         Checking Signature UnresolvedSignature(Int, unresolved) in count...         resolved to Int.
     [java]       Checking Signature foo in HelloWorldClass...       already resolved.
     [java]         Checking Signature UnresolvedSignature(Int, unresolved) in foo...         resolved to Int.
     [java]       Checking Signature bar in HelloWorldClass...       already resolved.
     [java]         Checking Signature UnresolvedSignature(Int, unresolved) in bar...         resolved to Int.
     [java]       Checking Signature bla in HelloWorldClass...       already resolved.
     [java]         Checking Signature UnresolvedSignature(Int, unresolved) in bla...         resolved to Int.
     [java]       Checking Signature run in HelloWorldClass...       already resolved.
     [java]         Checking Signature UnresolvedSignature(void, unresolved) in run...         resolved to void.
     [java]       Checking Signature function in HelloWorldClass...       already resolved.
     [java]         Checking Signature UnresolvedSignature(Int, unresolved) in function...         resolved to Int.
     [java]         Checking Signature UnresolvedSignature(Int, unresolved) in function...         resolved to Int.
     [java]         Checking Signature UnresolvedSignature(Int, unresolved) in function...         resolved to Int.
     [java]       Checking Signature UnresolvedSignature(this, unresolved) in HelloWorldClass...       resolved to HelloWorldClass.
     [java]     Checking Signature main in MyNamespace...     already resolved.
     [java]       Checking Signature UnresolvedSignature(Int, unresolved) in main...       resolved to Int.
     [java]       Checking Signature i in main...       already resolved.
     [java]         Checking Signature UnresolvedSignature(Int, unresolved) in i...         resolved to Int.
     [java]       Checking Signature eval in main...       already resolved.
     [java]         Checking Signature UnresolvedSignature(Int, unresolved) in eval...         resolved to Int.
     [java]       Checking Signature error in main...       already resolved.
     [java]         Checking Signature UnresolvedSignature(Int, unresolved) in error...         resolved to Int.
     [java]       Checking Signature k in main...       already resolved.
     [java]         Checking Signature UnresolvedSignature(List, unresolved) in k...         resolved to List.
     [java]       Checking Signature list in main...       already resolved.
     [java]         Checking Signature UnresolvedSignature(List, unresolved) in list...         resolved to List.
     [java]       Checking Signature evalFun in main...       already resolved.
     [java]         Checking Signature UnresolvedSignature(Int, unresolved) in evalFun...         resolved to Int.
     [java]       Checking Signature helloClass in main...       already resolved.
     [java]         Checking Signature UnresolvedSignature(HelloWorldClass, unresolved) in helloClass...         resolved to HelloWorldClass.
     [java]       Checking Signature (UnresolvedSignature(Int, unresolved) UnresolvedSignature(Int, unresolved) -> UnresolvedSignature(Int, unresolved)) in main...       already resolved.
     [java]         Checking Signature UnresolvedSignature(Int, unresolved) in main...         resolved to Int.
     [java]         Checking Signature UnresolvedSignature(Int, unresolved) in main...         resolved to Int.
     [java]         Checking Signature UnresolvedSignature(Int, unresolved) in main...         resolved to Int.
     [java]     Checking Signature UnresolvedSignature(void, unresolved) in MyNamespace...     resolved to void.
     [java]   Checking Signature UnresolvedSignature(void, unresolved) in Root...   resolved to void.
     [java] Unresolved types: 
     [java]     
     [java] Unresolved values: 
     [java]     
     [java] Root (_{java.lang.String[]}_ -> void) List[-{ List argList = new List();fo... }- void, void]
     [java] parameter args  from Root (null, _{java.lang.String[]}_)
     [java] args (_{java.lang.String[]}_) void
     [java]   args.this (args) -{ this }- args
     [java]   args (_{java.lang.String[]}_) void
     [java]     args.this (args) -{ this }- args
     [java]   Root.this (_{java.lang.String[]}_ -> Root) -{ this }- Root
     [java]   void ( -> void) void
     [java]   List ( -> List) UnresolvedInstruction('this')
     [java]     List.this ( -> List) -{ this }- List
     [java]     list (_{java.util.ArrayList}_) -{ new java.util.ArrayList();  }- java.util.ArrayList
     [java]       list.this (list) -{ this }- list
     [java]     += (_ -> List) List[-{ list.add(element);  }- void, List[UnresolvedInstruction('List'), UnresolvedInstruction('this')]]
     [java] parameter element  from += (( -> UnresolvedSignature(this, unresolved)), _)
     [java] element (_) void
     [java]   element.this (element) -{ this }- element
     [java]       element (_) void
     [java]         element.this (element) -{ this }- element
     [java]       +=.this (_ -> +=) -{ this }- +=
     [java]     get (Int -> _{java.lang.Object}_) -{ list.get(i.toInt()._hlisp_run(... }- java.lang.Object
     [java] parameter i  from get (( -> UnresolvedSignature(this, unresolved)), Int)
     [java] i (Int) void
     [java]   i.this (i) -{ this }- i
     [java]       i (Int) void
     [java]         i.this (i) -{ this }- i
     [java]       get.this (Int -> get) -{ this }- get
     [java]   while (( -> Boolean) ( -> void) -> void) List[-{  while (condition._hlisp_run()... }- void, UnresolvedInstruction('void')]
     [java] parameter condition  from while (Root, ( -> Boolean), ( -> void))
     [java] condition (( -> Boolean)) void
     [java]   condition.this (condition) -{ this }- condition
     [java]     condition (( -> Boolean)) void
     [java]       condition.this (condition) -{ this }- condition
     [java] parameter body  from while (Root, ( -> Boolean), ( -> void))
     [java] body (( -> void)) void
     [java]   body.this (body) -{ this }- body
     [java]     body (( -> void)) void
     [java]       body.this (body) -{ this }- body
     [java]     while.this (( -> Boolean) ( -> void) -> while) -{ this }- while
     [java]   Int (_{int}_ -> Int) UnresolvedInstruction('this')
     [java] parameter value  from Int (Root, _{int}_)
     [java] value (_{int}_) void
     [java]   value.this (value) -{ this }- value
     [java]     value (_{int}_) void
     [java]       value.this (value) -{ this }- value
     [java]     Int.this (_{int}_ -> Int) -{ this }- Int
     [java]     + (Int -> Int) List[UnresolvedInstruction('Int'), -{ value + other.value  }- int]
     [java] parameter other  from + ((_{int}_ -> UnresolvedSignature(this, unresolved)), Int)
     [java] other (Int) void
     [java]   other.this (other) -{ this }- other
     [java]       other (Int) void
     [java]         other.this (other) -{ this }- other
     [java]       +.this (Int -> +) -{ this }- +
     [java]     * (Int -> Int) List[UnresolvedInstruction('Int'), -{ value * other.value  }- int]
     [java] parameter other  from * ((_{int}_ -> UnresolvedSignature(this, unresolved)), Int)
     [java] other (Int) void
     [java]   other.this (other) -{ this }- other
     [java]       other (Int) void
     [java]         other.this (other) -{ this }- other
     [java]       *.this (Int -> *) -{ this }- *
     [java]     ++ ( -> void) -{ value++; }- void
     [java]       ++.this ( -> ++) -{ this }- ++
     [java]     < (Int -> Boolean) List[UnresolvedInstruction('Boolean'), -{ value < other.value }- boolean]
     [java] parameter other  from < ((_{int}_ -> UnresolvedSignature(this, unresolved)), Int)
     [java] other (Int) void
     [java]   other.this (other) -{ this }- other
     [java]       other (Int) void
     [java]         other.this (other) -{ this }- other
     [java]       <.this (Int -> <) -{ this }- <
     [java]     toInt ( -> _{java.lang.Integer}_) -{ return value;  }- java.lang.Integer
     [java]       toInt.this ( -> toInt) -{ this }- toInt
     [java]     toString ( -> String) List[UnresolvedInstruction('String'), -{ java.lang.String.valueOf(value... }- java.lang.String]
     [java]       toString.this ( -> toString) -{ this }- toString
     [java]   Boolean (_{boolean}_ -> Boolean) UnresolvedInstruction('this')
     [java] parameter value  from Boolean (Root, _{boolean}_)
     [java] value (_{boolean}_) void
     [java]   value.this (value) -{ this }- value
     [java]     value (_{boolean}_) void
     [java]       value.this (value) -{ this }- value
     [java]     Boolean.this (_{boolean}_ -> Boolean) -{ this }- Boolean
     [java]     ! ( -> Boolean) List[UnresolvedInstruction('Boolean'), -{ !value  }- boolean]
     [java]       !.this ( -> !) -{ this }- !
     [java]     toString ( -> String) List[UnresolvedInstruction('String'), -{ java.lang.Boolean.toString(val... }- java.lang.String]
     [java]       toString.this ( -> toString) -{ this }- toString
     [java]     toBoolean ( -> _{boolean}_) -{ return value;  }- boolean
     [java]       toBoolean.this ( -> toBoolean) -{ this }- toBoolean
     [java]   String (_{java.lang.String}_ -> String) UnresolvedInstruction('this')
     [java] parameter value  from String (Root, _{java.lang.String}_)
     [java] value (_{java.lang.String}_) void
     [java]   value.this (value) -{ this }- value
     [java]     value (_{java.lang.String}_) void
     [java]       value.this (value) -{ this }- value
     [java]     String.this (_{java.lang.String}_ -> String) -{ this }- String
     [java]     + (String -> String) List[UnresolvedInstruction('String'), -{ value + other.value  }- java.lang.String]
     [java] parameter other  from + ((_{java.lang.String}_ -> UnresolvedSignature(this, unresolved)), String)
     [java] other (String) void
     [java]   other.this (other) -{ this }- other
     [java]       other (String) void
     [java]         other.this (other) -{ this }- other
     [java]       +.this (String -> +) -{ this }- +
     [java]     print ( -> void) -{ System.out.print(value);  }- void
     [java]       print.this ( -> print) -{ this }- print
     [java]     println ( -> void) List[List[List[UnresolvedInstruction('String'), UnresolvedInstruction('this')], UnresolvedInstruction('+'), call__ UnresolvedType(String, unresolved)(-{ "\n" }- String)], UnresolvedInstruction('print')]
     [java]       println.this ( -> println) -{ this }- println
     [java]   MyNamespace ( -> void) void
     [java]     MyNamespace.this ( -> MyNamespace) -{ this }- MyNamespace
     [java]     HelloWorldClass ( -> HelloWorldClass) UnresolvedInstruction('this')
     [java]       HelloWorldClass.this ( -> HelloWorldClass) -{ this }- HelloWorldClass
     [java]       count (Int) call__ UnresolvedType(Int, unresolved)(-{ 5 }- Int)
     [java]         count.this (count) -{ this }- count
     [java]       foo (Int) call__ UnresolvedType(Int, unresolved)(-{ 0 }- Int)
     [java]         foo.this (foo) -{ this }- foo
     [java]       bar (Int) call__ UnresolvedType(Int, unresolved)(-{ 3 }- Int)
     [java]         bar.this (bar) -{ this }- bar
     [java]       bla (Int) List[UnresolvedInstruction('foo'), UnresolvedInstruction('+'), UnresolvedInstruction('bar')]
     [java]         bla.this (bla) -{ this }- bla
     [java]       run ( -> void) List[List[call__ UnresolvedType(String, unresolved)(-{ "Hello World!" }- String), UnresolvedInstruction('+'), List[UnresolvedInstruction('count'), UnresolvedInstruction('toString')]], UnresolvedInstruction('print')]
     [java]         run.this ( -> run) -{ this }- run
     [java]       function (Int Int -> Int) List[UnresolvedInstruction('a'), UnresolvedInstruction('+'), UnresolvedInstruction('b')]
     [java] parameter a  from function (( -> UnresolvedSignature(this, unresolved)), Int, Int)
     [java] a (Int) void
     [java]   a.this (a) -{ this }- a
     [java]         a (Int) void
     [java]           a.this (a) -{ this }- a
     [java] parameter b  from function (( -> UnresolvedSignature(this, unresolved)), Int, Int)
     [java] b (Int) void
     [java]   b.this (b) -{ this }- b
     [java]         b (Int) void
     [java]           b.this (b) -{ this }- b
     [java]         function.this (Int Int -> function) -{ this }- function
     [java]     main (Int -> (Int Int -> Int)) List[List[UnresolvedInstruction('while'), lambda__ ( -> UnresolvedSignature(Boolean, unresolved)), lambda__ ( -> UnresolvedSignature(void, unresolved))], List[UnresolvedInstruction('while'), lambda__ ( -> UnresolvedSignature(Boolean, unresolved)), lambda__ ( -> UnresolvedSignature(void, unresolved))], lambda__ (UnresolvedSignature(Int, unresolved) UnresolvedSignature(Int, unresolved) -> UnresolvedSignature(Int, unresolved))]
     [java] parameter param  from main (( -> UnresolvedSignature(void, unresolved)), Int)
     [java] param (Int) void
     [java]   param.this (param) -{ this }- param
     [java]       param (Int) void
     [java]         param.this (param) -{ this }- param
     [java]       main.this (Int -> main) -{ this }- main
     [java]       i (Int) call__ UnresolvedType(Int, unresolved)(-{ 0 }- Int)
     [java]         i.this (i) -{ this }- i
     [java]       eval (Int) List[call__ UnresolvedType(Int, unresolved)(-{ 5 }- Int), UnresolvedInstruction('+'), List[UnresolvedInstruction('i'), UnresolvedInstruction('*'), call__ UnresolvedType(Int, unresolved)(-{ 4 }- Int)]]
     [java]         eval.this (eval) -{ this }- eval
     [java]       error ( -> Int) call__ UnresolvedType(Int, unresolved)(-{ 0 }- Int)
     [java]         error.this ( -> error) -{ this }- error
     [java]       k (List) UnresolvedInstruction('List')
     [java]         k.this (k) -{ this }- k
     [java]       list (List) List[UnresolvedInstruction('List'), UnresolvedInstruction('+='), call__ UnresolvedType(String, unresolved)(-{ "some" }- String), UnresolvedInstruction('+='), call__ UnresolvedType(String, unresolved)(-{ "elements" }- String)]
     [java]         list.this (list) -{ this }- list
     [java]       evalFun ( -> Int) List[call__ UnresolvedType(Int, unresolved)(-{ 5 }- Int), UnresolvedInstruction('+'), List[UnresolvedInstruction('i'), UnresolvedInstruction('*'), call__ UnresolvedType(Int, unresolved)(-{ 4 }- Int)]]
     [java]         evalFun.this ( -> evalFun) -{ this }- evalFun
     [java]       helloClass (HelloWorldClass) UnresolvedInstruction('HelloWorldClass')
     [java]         helloClass.this (helloClass) -{ this }- helloClass
     [java] Instruction List[-{ List argList = new List();fo... }- void, void] in Root needs solving.
     [java] /----Solving List[-{ List argList = new List();fo... }- void, void]
     [java]   lastIdentifier null
     [java]   0. child -{ List argList = new List();fo... }- void
     [java]     Lookup check
     [java]     checking for function...
     [java]     Next is a function with no parameters.
     [java]       Checking Signature UnresolvedSignature(void, unresolved) in Root...       resolved to void.
     [java]   lastIdentifier void
     [java]   1. child void
     [java]     Lookup check
     [java]     -{ List argList = new List();fo... }- void in single statement list
     [java] adding void to result.
     [java] ----/Result: List[-{ List argList = new List();fo... }- void, void]
     [java]   Solved to List[-{ List argList = new List();fo... }- void, void]
     [java]     Instruction void in void needs solving.
     [java]         Checking Signature UnresolvedSignature(void, unresolved) in void...         resolved to void.
     [java]     Solved to void
     [java]     Instruction UnresolvedInstruction('this') in List needs solving.
     [java]       Solved to call__ List.this()
     [java]         Instruction -{ new java.util.ArrayList();  }- java.util.ArrayList in list needs solving.
     [java]             Checking Signature _{java.util.ArrayList}_ in list...             already resolved.
     [java]         Solved to -{ new java.util.ArrayList();  }- java.util.ArrayList
     [java]         Instruction List[-{ list.add(element);  }- void, List[UnresolvedInstruction('List'), UnresolvedInstruction('this')]] in += needs solving.
     [java] /----Solving List[-{ list.add(element);  }- void, List[UnresolvedInstruction('List'), UnresolvedInstruction('this')]]
     [java]               Checking Signature UnresolvedSignature(void, unresolved) in +=...               resolved to void.
     [java]   lastIdentifier null
     [java]   0. child -{ list.add(element);  }- void
     [java]     Lookup check
     [java]     checking for function...
     [java]     Next is a function with no parameters.
     [java] /----Solving List[UnresolvedInstruction('List'), UnresolvedInstruction('this')]
     [java]   lastIdentifier null
     [java]   0. child UnresolvedInstruction('List')
     [java]     Lookup check
     [java]     lastIdentifierCall = null
     [java]     List found in current scope, setting to List
     [java]     lastIdentifierCall = call__ List()
     [java]     checking for function...
     [java]     Next is a function with no parameters.
     [java]   lastIdentifier List
     [java]   1. child UnresolvedInstruction('this')
     [java]     Lookup check
     [java]     lastIdentifierCall = call__ List()
     [java]     Resolving this
     [java]       as List.this
     [java]       from List
     [java]     lastIdentifierCall = call__ (call__ List()).List.this()
     [java]     checking for function...
     [java]     Next is a function with no parameters.
     [java] adding call__ (call__ List()).List.this() to result.
     [java] ----/Result: call__ (call__ List()).List.this()
     [java]   lastIdentifier void
     [java]   1. child call__ (call__ List()).List.this()
     [java]     Lookup check
     [java]     -{ list.add(element);  }- void in single statement list
     [java] adding call__ (call__ List()).List.this() to result.
     [java] ----/Result: List[-{ list.add(element);  }- void, call__ (call__ List()).List.this()]
     [java]             Solved to List[-{ list.add(element);  }- void, call__ (call__ List()).List.this()]
     [java]             Instruction -{ list.get(i.toInt()._hlisp_run(... }- java.lang.Object in get needs solving.
     [java]                 Checking Signature _{java.lang.Object}_ in get...                 already resolved.
     [java]             Solved to -{ list.get(i.toInt()._hlisp_run(... }- java.lang.Object
     [java]               Instruction UnresolvedInstruction('this') in Int needs solving.
     [java]                 Solved to call__ Int.this()
     [java]                   Instruction List[UnresolvedInstruction('Int'), -{ value + other.value  }- int] in + needs solving.
     [java] /----Solving List[UnresolvedInstruction('Int'), -{ value + other.value  }- int]
     [java]   lastIdentifier null
     [java]   0. child UnresolvedInstruction('Int')
     [java]     Lookup check
     [java]     lastIdentifierCall = null
     [java]     Int found in current scope, setting to Int
     [java]     lastIdentifierCall = call__ Int()
     [java]     checking for function...
     [java]     Next is a function Int
     [java]     with parameters _{int}_.
     [java]                         Checking Signature _{int}_ in +...                         already resolved.
     [java]   lastIdentifier Int
     [java]   1. child -{ value + other.value  }- int
     [java]     Parameter check
     [java]     Checking parameter _{int}_ as #0 on Int.
     [java]     -{ value + other.value  }- int is parameter.
     [java]     Function call to Int complete.
     [java]     Next is a function Int
     [java]     with parameters _{int}_.
     [java]     lastIdentifierCall = call__ Int(-{ value + other.value  }- int)
     [java] adding call__ Int(-{ value + other.value  }- int) to result.
     [java] ----/Result: call__ Int(-{ value + other.value  }- int)
     [java]                     Solved to call__ Int(-{ value + other.value  }- int)
     [java]                     Instruction List[UnresolvedInstruction('Int'), -{ value * other.value  }- int] in * needs solving.
     [java] /----Solving List[UnresolvedInstruction('Int'), -{ value * other.value  }- int]
     [java]   lastIdentifier null
     [java]   0. child UnresolvedInstruction('Int')
     [java]     Lookup check
     [java]     lastIdentifierCall = null
     [java]     Int found in current scope, setting to Int
     [java]     lastIdentifierCall = call__ Int()
     [java]     checking for function...
     [java]     Next is a function Int
     [java]     with parameters _{int}_.
     [java]                           Checking Signature _{int}_ in *...                           already resolved.
     [java]   lastIdentifier Int
     [java]   1. child -{ value * other.value  }- int
     [java]     Parameter check
     [java]     Checking parameter _{int}_ as #0 on Int.
     [java]     -{ value * other.value  }- int is parameter.
     [java]     Function call to Int complete.
     [java]     Next is a function Int
     [java]     with parameters _{int}_.
     [java]     lastIdentifierCall = call__ Int(-{ value * other.value  }- int)
     [java] adding call__ Int(-{ value * other.value  }- int) to result.
     [java] ----/Result: call__ Int(-{ value * other.value  }- int)
     [java]                       Solved to call__ Int(-{ value * other.value  }- int)
     [java]                       Instruction -{ value++; }- void in ++ needs solving.
     [java]                           Checking Signature UnresolvedSignature(void, unresolved) in ++...                           resolved to void.
     [java]                       Solved to -{ value++; }- void
     [java]                       Instruction List[UnresolvedInstruction('Boolean'), -{ value < other.value }- boolean] in < needs solving.
     [java] /----Solving List[UnresolvedInstruction('Boolean'), -{ value < other.value }- boolean]
     [java]   lastIdentifier null
     [java]   0. child UnresolvedInstruction('Boolean')
     [java]     Lookup check
     [java]     lastIdentifierCall = null
     [java]     Boolean found in current scope, setting to Boolean
     [java]     lastIdentifierCall = call__ Boolean()
     [java]     checking for function...
     [java]     Next is a function Boolean
     [java]     with parameters _{boolean}_.
     [java]                             Checking Signature _{boolean}_ in <...                             already resolved.
     [java]   lastIdentifier Boolean
     [java]   1. child -{ value < other.value }- boolean
     [java]     Parameter check
     [java]     Checking parameter _{boolean}_ as #0 on Boolean.
     [java]     -{ value < other.value }- boolean is parameter.
     [java]     Function call to Boolean complete.
     [java]     Next is a function Boolean
     [java]     with parameters _{boolean}_.
     [java]     lastIdentifierCall = call__ Boolean(-{ value < other.value }- boolean)
     [java] adding call__ Boolean(-{ value < other.value }- boolean) to result.
     [java] ----/Result: call__ Boolean(-{ value < other.value }- boolean)
     [java]                         Solved to call__ Boolean(-{ value < other.value }- boolean)
     [java]                           Instruction UnresolvedInstruction('this') in Boolean needs solving.
     [java]                             Solved to call__ Boolean.this()
     [java]                               Instruction List[UnresolvedInstruction('Boolean'), -{ !value  }- boolean] in ! needs solving.
     [java] /----Solving List[UnresolvedInstruction('Boolean'), -{ !value  }- boolean]
     [java]   lastIdentifier null
     [java]   0. child UnresolvedInstruction('Boolean')
     [java]     Lookup check
     [java]     lastIdentifierCall = null
     [java]     Boolean found in current scope, setting to Boolean
     [java]     lastIdentifierCall = call__ Boolean()
     [java]     checking for function...
     [java]     Next is a function Boolean
     [java]     with parameters _{boolean}_.
     [java]                                     Checking Signature _{boolean}_ in !...                                     already resolved.
     [java]   lastIdentifier Boolean
     [java]   1. child -{ !value  }- boolean
     [java]     Parameter check
     [java]     Checking parameter _{boolean}_ as #0 on Boolean.
     [java]     -{ !value  }- boolean is parameter.
     [java]     Function call to Boolean complete.
     [java]     Next is a function Boolean
     [java]     with parameters _{boolean}_.
     [java]     lastIdentifierCall = call__ Boolean(-{ !value  }- boolean)
     [java] adding call__ Boolean(-{ !value  }- boolean) to result.
     [java] ----/Result: call__ Boolean(-{ !value  }- boolean)
     [java]                                 Solved to call__ Boolean(-{ !value  }- boolean)
     [java]                                 Instruction List[UnresolvedInstruction('String'), -{ java.lang.Boolean.toString(val... }- java.lang.String] in toString needs solving.
     [java] /----Solving List[UnresolvedInstruction('String'), -{ java.lang.Boolean.toString(val... }- java.lang.String]
     [java]   lastIdentifier null
     [java]   0. child UnresolvedInstruction('String')
     [java]     Lookup check
     [java]     lastIdentifierCall = null
     [java]     String found in current scope, setting to String
     [java]     lastIdentifierCall = call__ String()
     [java]     checking for function...
     [java]     Next is a function String
     [java]     with parameters _{java.lang.String}_.
     [java]                                       Checking Signature _{java.lang.String}_ in toString...                                       already resolved.
     [java]   lastIdentifier String
     [java]   1. child -{ java.lang.Boolean.toString(val... }- java.lang.String
     [java]     Parameter check
     [java]     Checking parameter _{java.lang.String}_ as #0 on String.
     [java]     -{ java.lang.Boolean.toString(val... }- java.lang.String is parameter.
     [java]     Function call to String complete.
     [java]     Next is a function String
     [java]     with parameters _{java.lang.String}_.
     [java]     lastIdentifierCall = call__ String(-{ java.lang.Boolean.toString(val... }- java.lang.String)
     [java] adding call__ String(-{ java.lang.Boolean.toString(val... }- java.lang.String) to result.
     [java] ----/Result: call__ String(-{ java.lang.Boolean.toString(val... }- java.lang.String)
     [java]                                   Solved to call__ String(-{ java.lang.Boolean.toString(val... }- java.lang.String)
     [java]                                     Instruction UnresolvedInstruction('this') in String needs solving.
     [java]                                       Solved to call__ String.this()
     [java]                                         Instruction List[UnresolvedInstruction('String'), -{ value + other.value  }- java.lang.String] in + needs solving.
     [java] /----Solving List[UnresolvedInstruction('String'), -{ value + other.value  }- java.lang.String]
     [java]   lastIdentifier null
     [java]   0. child UnresolvedInstruction('String')
     [java]     Lookup check
     [java]     lastIdentifierCall = null
     [java]     String found in current scope, setting to String
     [java]     lastIdentifierCall = call__ String()
     [java]     checking for function...
     [java]     Next is a function String
     [java]     with parameters _{java.lang.String}_.
     [java]                                               Checking Signature _{java.lang.String}_ in +...                                               already resolved.
     [java]   lastIdentifier String
     [java]   1. child -{ value + other.value  }- java.lang.String
     [java]     Parameter check
     [java]     Checking parameter _{java.lang.String}_ as #0 on String.
     [java]     -{ value + other.value  }- java.lang.String is parameter.
     [java]     Function call to String complete.
     [java]     Next is a function String
     [java]     with parameters _{java.lang.String}_.
     [java]     lastIdentifierCall = call__ String(-{ value + other.value  }- java.lang.String)
     [java] adding call__ String(-{ value + other.value  }- java.lang.String) to result.
     [java] ----/Result: call__ String(-{ value + other.value  }- java.lang.String)
     [java]                                           Solved to call__ String(-{ value + other.value  }- java.lang.String)
     [java]                                           Instruction -{ System.out.print(value);  }- void in print needs solving.
     [java]                                               Checking Signature UnresolvedSignature(void, unresolved) in print...                                               resolved to void.
     [java]                                           Solved to -{ System.out.print(value);  }- void
     [java]                                           Instruction List[List[List[UnresolvedInstruction('String'), UnresolvedInstruction('this')], UnresolvedInstruction('+'), call__ UnresolvedType(String, unresolved)(-{ "\n" }- String)], UnresolvedInstruction('print')] in println needs solving.
     [java] /----Solving List[List[List[UnresolvedInstruction('String'), UnresolvedInstruction('this')], UnresolvedInstruction('+'), call__ UnresolvedType(String, unresolved)(-{ "\n" }- String)], UnresolvedInstruction('print')]
     [java] /----Solving List[List[UnresolvedInstruction('String'), UnresolvedInstruction('this')], UnresolvedInstruction('+'), call__ UnresolvedType(String, unresolved)(-{ "\n" }- String)]
     [java] /----Solving List[UnresolvedInstruction('String'), UnresolvedInstruction('this')]
     [java]   lastIdentifier null
     [java]   0. child UnresolvedInstruction('String')
     [java]     Lookup check
     [java]     lastIdentifierCall = null
     [java]     String found in current scope, setting to String
     [java]     lastIdentifierCall = call__ String()
     [java]     checking for function...
     [java]     Next is a function String
     [java]     with parameters _{java.lang.String}_.
     [java]   lastIdentifier String
     [java]   1. child UnresolvedInstruction('this')
     [java]     Parameter check
     [java]     Resolving this
     [java]       as println.this [: println]
     [java]       from println
     [java] println.this ( -> println) -{ this }- println
     [java]     Checking parameter println as #0 on String.
     [java]     println doesn't match as parameterType, _{java.lang.String}_ expected.
     [java]     Parametercheck failed, backtracking to 1...
     [java]   lastIdentifier String
     [java]   1. child UnresolvedInstruction('this')
     [java]     Lookup check
     [java]     lastIdentifierCall = call__ String()
     [java]     Resolving this
     [java]       as String.this
     [java]       from String
     [java]     lastIdentifierCall = call__ (call__ String()).String.this()
     [java]     checking for function...
     [java]     Next is a function String.this
     [java]     with parameters _{java.lang.String}_.
     [java] adding call__ (call__ String()).String.this() to result.
     [java] ----/Result: call__ (call__ String()).String.this()
     [java]   lastIdentifier null
     [java]   0. child call__ (call__ String()).String.this()
     [java]     Lookup check
     [java]     checking for function...
     [java]     Next is a function String
     [java]     with parameters _{java.lang.String}_.
     [java]   lastIdentifier String
     [java]   1. child UnresolvedInstruction('+')
     [java]     Parameter check
     [java]     Resolving +
     [java]       as + [String: String]
     [java]       from println
     [java] + (String -> String) call__ String(-{ value + other.value  }- java.lang.String)
     [java] parameter other  from + ((_{java.lang.String}_ -> UnresolvedSignature(this, unresolved)), String)
     [java] other (String) void
     [java]   other.this (other) -{ this }- other
     [java]   other (String) void
     [java]     other.this (other) -{ this }- other
     [java]   +.this (String -> +) -{ this }- +
     [java]     Checking parameter String as #0 on String.
     [java]     String doesn't match as parameterType, _{java.lang.String}_ expected.
     [java]     Parametercheck failed, backtracking to 1...
     [java]   lastIdentifier String
     [java]   1. child UnresolvedInstruction('+')
     [java]     Lookup check
     [java]     lastIdentifierCall = call__ (call__ String()).String.this()
     [java]     Resolving +
     [java]       as +
     [java]       from String
     [java]     lastIdentifierCall = call__ (call__ (call__ String()).String.this()).+()
     [java]     checking for function...
     [java]     Next is a function +
     [java]     with parameters String.
     [java]                                                     Checking Signature UnresolvedType(String, unresolved) in println...                                                     resolved to String.
     [java]   lastIdentifier +
     [java]   2. child call__ String(-{ "\n" }- String)
     [java]     Parameter check
     [java]     Checking parameter String as #0 on +.
     [java]     call__ String(-{ "\n" }- String) is parameter.
     [java]     Function call to + complete.
     [java]     Next is a function String
     [java]     with parameters _{java.lang.String}_.
     [java]     lastIdentifierCall = call__ (call__ (call__ String()).String.this()).+(call__ String(-{ "\n" }- String))
     [java] adding call__ (call__ (call__ String()).String.this()).+(call__ String(-{ "\n" }- String)) to result.
     [java] ----/Result: call__ (call__ (call__ String()).String.this()).+(call__ String(-{ "\n" }- String))
     [java]   lastIdentifier null
     [java]   0. child call__ (call__ (call__ String()).String.this()).+(call__ String(-{ "\n" }- String))
     [java]     Lookup check
     [java]     checking for function...
     [java]     Next is a function String
     [java]     with parameters _{java.lang.String}_.
     [java]   lastIdentifier String
     [java]   1. child UnresolvedInstruction('print')
     [java]     Parameter check
     [java]     Resolving print
     [java]       as print [: void]
     [java]       from println
     [java] print ( -> void) -{ System.out.print(value);  }- void
     [java]   print.this ( -> print) -{ this }- print
     [java]     Checking parameter void as #0 on String.
     [java]     void doesn't match as parameterType, _{java.lang.String}_ expected.
     [java]     Parametercheck failed, backtracking to 1...
     [java]   lastIdentifier String
     [java]   1. child UnresolvedInstruction('print')
     [java]     Lookup check
     [java]     lastIdentifierCall = call__ (call__ (call__ String()).String.this()).+(call__ String(-{ "\n" }- String))
     [java]     Resolving print
     [java]       as print
     [java]       from String
     [java]     lastIdentifierCall = call__ (call__ (call__ (call__ String()).String.this()).+(call__ String(-{ "\n" }- String))).print()
     [java]     checking for function...
     [java]     Next is a function with no parameters.
     [java] adding call__ (call__ (call__ (call__ String()).String.this()).+(call__ String(-{ "\n" }- String))).print() to result.
     [java] ----/Result: call__ (call__ (call__ (call__ String()).String.this()).+(call__ String(-{ "\n" }- String))).print()
     [java]                                                 Solved to call__ (call__ (call__ (call__ String()).String.this()).+(call__ String(-{ "\n" }- String))).print()
     [java]                                             Instruction -{ return value;  }- boolean in toBoolean needs solving.
     [java]                                                 Checking Signature _{boolean}_ in toBoolean...                                                 already resolved.
     [java]                                             Solved to -{ return value;  }- boolean
     [java]                                         Instruction -{ return value;  }- java.lang.Integer in toInt needs solving.
     [java]                                             Checking Signature _{java.lang.Integer}_ in toInt...                                             already resolved.
     [java]                                         Solved to -{ return value;  }- java.lang.Integer
     [java]                                         Instruction List[UnresolvedInstruction('String'), -{ java.lang.String.valueOf(value... }- java.lang.String] in toString needs solving.
     [java] /----Solving List[UnresolvedInstruction('String'), -{ java.lang.String.valueOf(value... }- java.lang.String]
     [java]   lastIdentifier null
     [java]   0. child UnresolvedInstruction('String')
     [java]     Lookup check
     [java]     lastIdentifierCall = null
     [java]     String found in current scope, setting to String
     [java]     lastIdentifierCall = call__ String()
     [java]     checking for function...
     [java]     Next is a function String
     [java]     with parameters _{java.lang.String}_.
     [java]                                               Checking Signature _{java.lang.String}_ in toString...                                               already resolved.
     [java]   lastIdentifier String
     [java]   1. child -{ java.lang.String.valueOf(value... }- java.lang.String
     [java]     Parameter check
     [java]     Checking parameter _{java.lang.String}_ as #0 on String.
     [java]     -{ java.lang.String.valueOf(value... }- java.lang.String is parameter.
     [java]     Function call to String complete.
     [java]     Next is a function String
     [java]     with parameters _{java.lang.String}_.
     [java]     lastIdentifierCall = call__ String(-{ java.lang.String.valueOf(value... }- java.lang.String)
     [java] adding call__ String(-{ java.lang.String.valueOf(value... }- java.lang.String) to result.
     [java] ----/Result: call__ String(-{ java.lang.String.valueOf(value... }- java.lang.String)
     [java]                                           Solved to call__ String(-{ java.lang.String.valueOf(value... }- java.lang.String)
     [java]                                     Instruction List[-{  while (condition._hlisp_run()... }- void, UnresolvedInstruction('void')] in while needs solving.
     [java] /----Solving List[-{  while (condition._hlisp_run()... }- void, UnresolvedInstruction('void')]
     [java]                                           Checking Signature UnresolvedSignature(void, unresolved) in while...                                           resolved to void.
     [java]   lastIdentifier null
     [java]   0. child -{  while (condition._hlisp_run()... }- void
     [java]     Lookup check
     [java]     checking for function...
     [java]     Next is a function with no parameters.
     [java]   lastIdentifier void
     [java]   1. child UnresolvedInstruction('void')
     [java]     Lookup check
     [java]     lastIdentifierCall = -{  while (condition._hlisp_run()... }- void
     [java]     -{  while (condition._hlisp_run()... }- void in single statement list
     [java]     void found in current scope, setting to void
     [java]     lastIdentifierCall = call__ void()
     [java] adding call__ void() to result.
     [java] ----/Result: List[-{  while (condition._hlisp_run()... }- void, call__ void()]
     [java]                                       Solved to List[-{  while (condition._hlisp_run()... }- void, call__ void()]
     [java]                                       Instruction void in MyNamespace needs solving.
     [java]                                           Checking Signature UnresolvedSignature(void, unresolved) in MyNamespace...                                           resolved to void.
     [java]                                       Solved to void
     [java]                                         Instruction UnresolvedInstruction('this') in HelloWorldClass needs solving.
     [java]                                           Solved to call__ HelloWorldClass.this()
     [java]                                             Instruction call__ UnresolvedType(Int, unresolved)(-{ 5 }- Int) in count needs solving.
     [java]                                                 Checking Signature UnresolvedType(Int, unresolved) in count...                                                 resolved to Int.
     [java]                                             Solved to call__ Int(-{ 5 }- Int)
     [java]                                             Instruction call__ UnresolvedType(Int, unresolved)(-{ 0 }- Int) in foo needs solving.
     [java]                                                 Checking Signature UnresolvedType(Int, unresolved) in foo...                                                 resolved to Int.
     [java]                                             Solved to call__ Int(-{ 0 }- Int)
     [java]                                             Instruction call__ UnresolvedType(Int, unresolved)(-{ 3 }- Int) in bar needs solving.
     [java]                                                 Checking Signature UnresolvedType(Int, unresolved) in bar...                                                 resolved to Int.
     [java]                                             Solved to call__ Int(-{ 3 }- Int)
     [java]                                             Instruction List[UnresolvedInstruction('foo'), UnresolvedInstruction('+'), UnresolvedInstruction('bar')] in bla needs solving.
     [java] /----Solving List[UnresolvedInstruction('foo'), UnresolvedInstruction('+'), UnresolvedInstruction('bar')]
     [java]   lastIdentifier null
     [java]   0. child UnresolvedInstruction('foo')
     [java]     Lookup check
     [java]     lastIdentifierCall = null
     [java]     foo found in current scope, setting to foo
     [java]     lastIdentifierCall = call__ foo()
     [java]     checking for function...
     [java]     Next is not a function.
     [java]   lastIdentifier foo
     [java]   1. child UnresolvedInstruction('+')
     [java]     Lookup check
     [java]     lastIdentifierCall = call__ foo()
     [java]     Resolving +
     [java]       as +
     [java]       from Int
     [java]     lastIdentifierCall = call__ (call__ foo()).+()
     [java]     checking for function...
     [java]     Next is a function +
     [java]     with parameters Int.
     [java]   lastIdentifier +
     [java]   2. child UnresolvedInstruction('bar')
     [java]     Parameter check
     [java]     Resolving bar
     [java]       as bar [: Int]
     [java]       from bla
     [java] bar (Int) call__ Int(-{ 3 }- Int)
     [java]   bar.this (bar) -{ this }- bar
     [java]     Checking parameter Int as #0 on +.
     [java]     call__ bar() is parameter.
     [java]     Function call to + complete.
     [java]     Next is a function Int
     [java]     with parameters _{int}_.
     [java]     lastIdentifierCall = call__ (call__ foo()).+(call__ bar())
     [java] adding call__ (call__ foo()).+(call__ bar()) to result.
     [java] ----/Result: call__ (call__ foo()).+(call__ bar())
     [java]                                               Solved to call__ (call__ foo()).+(call__ bar())
     [java]                                               Instruction List[List[call__ UnresolvedType(String, unresolved)(-{ "Hello World!" }- String), UnresolvedInstruction('+'), List[UnresolvedInstruction('count'), UnresolvedInstruction('toString')]], UnresolvedInstruction('print')] in run needs solving.
     [java] /----Solving List[List[call__ UnresolvedType(String, unresolved)(-{ "Hello World!" }- String), UnresolvedInstruction('+'), List[UnresolvedInstruction('count'), UnresolvedInstruction('toString')]], UnresolvedInstruction('print')]
     [java] /----Solving List[call__ UnresolvedType(String, unresolved)(-{ "Hello World!" }- String), UnresolvedInstruction('+'), List[UnresolvedInstruction('count'), UnresolvedInstruction('toString')]]
     [java]                                                       Checking Signature UnresolvedType(String, unresolved) in run...                                                       resolved to String.
     [java]   lastIdentifier null
     [java]   0. child call__ String(-{ "Hello World!" }- String)
     [java]     Lookup check
     [java]     checking for function...
     [java]     Next is a function String
     [java]     with parameters _{java.lang.String}_.
     [java]   lastIdentifier String
     [java]   1. child UnresolvedInstruction('+')
     [java]     Parameter check
     [java]     couldn't resolve UnresolvedInstruction('+')
     [java]       in scope run
     [java]     Parametercheck failed, backtracking to 1...
     [java]   lastIdentifier String
     [java]   1. child UnresolvedInstruction('+')
     [java]     Lookup check
     [java]     lastIdentifierCall = call__ String(-{ "Hello World!" }- String)
     [java]     Resolving +
     [java]       as +
     [java]       from String
     [java]     lastIdentifierCall = call__ (call__ String(-{ "Hello World!" }- String)).+()
     [java]     checking for function...
     [java]     Next is a function +
     [java]     with parameters String.
     [java] /----Solving List[UnresolvedInstruction('count'), UnresolvedInstruction('toString')]
     [java]   lastIdentifier null
     [java]   0. child UnresolvedInstruction('count')
     [java]     Lookup check
     [java]     lastIdentifierCall = null
     [java]     count found in current scope, setting to count
     [java]     lastIdentifierCall = call__ count()
     [java]     checking for function...
     [java]     Next is not a function.
     [java]   lastIdentifier count
     [java]   1. child UnresolvedInstruction('toString')
     [java]     Lookup check
     [java]     lastIdentifierCall = call__ count()
     [java]     Resolving toString
     [java]       as toString
     [java]       from Int
     [java]     lastIdentifierCall = call__ (call__ count()).toString()
     [java]     checking for function...
     [java]     Next is a function with no parameters.
     [java] adding call__ (call__ count()).toString() to result.
     [java] ----/Result: call__ (call__ count()).toString()
     [java]   lastIdentifier +
     [java]   2. child call__ (call__ count()).toString()
     [java]     Parameter check
     [java]     Checking parameter String as #0 on +.
     [java]     call__ (call__ count()).toString() is parameter.
     [java]     Function call to + complete.
     [java]     Next is a function String
     [java]     with parameters _{java.lang.String}_.
     [java]     lastIdentifierCall = call__ (call__ String(-{ "Hello World!" }- String)).+(call__ (call__ count()).toString())
     [java] adding call__ (call__ String(-{ "Hello World!" }- String)).+(call__ (call__ count()).toString()) to result.
     [java] ----/Result: call__ (call__ String(-{ "Hello World!" }- String)).+(call__ (call__ count()).toString())
     [java]   lastIdentifier null
     [java]   0. child call__ (call__ String(-{ "Hello World!" }- String)).+(call__ (call__ count()).toString())
     [java]     Lookup check
     [java]     checking for function...
     [java]     Next is a function String
     [java]     with parameters _{java.lang.String}_.
     [java]   lastIdentifier String
     [java]   1. child UnresolvedInstruction('print')
     [java]     Parameter check
     [java]     couldn't resolve UnresolvedInstruction('print')
     [java]       in scope run
     [java]     Parametercheck failed, backtracking to 1...
     [java]   lastIdentifier String
     [java]   1. child UnresolvedInstruction('print')
     [java]     Lookup check
     [java]     lastIdentifierCall = call__ (call__ String(-{ "Hello World!" }- String)).+(call__ (call__ count()).toString())
     [java]     Resolving print
     [java]       as print
     [java]       from String
     [java]     lastIdentifierCall = call__ (call__ (call__ String(-{ "Hello World!" }- String)).+(call__ (call__ count()).toString())).print()
     [java]     checking for function...
     [java]     Next is a function with no parameters.
     [java] adding call__ (call__ (call__ String(-{ "Hello World!" }- String)).+(call__ (call__ count()).toString())).print() to result.
     [java] ----/Result: call__ (call__ (call__ String(-{ "Hello World!" }- String)).+(call__ (call__ count()).toString())).print()
     [java]                                                     Solved to call__ (call__ (call__ String(-{ "Hello World!" }- String)).+(call__ (call__ count()).toString())).print()
     [java]                                                     Instruction List[UnresolvedInstruction('a'), UnresolvedInstruction('+'), UnresolvedInstruction('b')] in function needs solving.
     [java] /----Solving List[UnresolvedInstruction('a'), UnresolvedInstruction('+'), UnresolvedInstruction('b')]
     [java]   lastIdentifier null
     [java]   0. child UnresolvedInstruction('a')
     [java]     Lookup check
     [java]     lastIdentifierCall = null
     [java] parameter a  from function (( -> UnresolvedSignature(this, unresolved)), Int, Int)
     [java] a (Int) void
     [java]   a.this (a) -{ this }- a
     [java] parameter a  from function (( -> UnresolvedSignature(this, unresolved)), Int, Int)
     [java] a (Int) void
     [java]   a.this (a) -{ this }- a
     [java] parameter a  from function (( -> UnresolvedSignature(this, unresolved)), Int, Int)
     [java] a (Int) void
     [java]   a.this (a) -{ this }- a
     [java] parameter a  from function (( -> UnresolvedSignature(this, unresolved)), Int, Int)
     [java] a (Int) void
     [java]   a.this (a) -{ this }- a
     [java]     a found in current scope, setting to a
     [java]     lastIdentifierCall = call__ a()
     [java]     checking for function...
     [java]     Next is not a function.
     [java]   lastIdentifier a
     [java]   1. child UnresolvedInstruction('+')
     [java]     Lookup check
     [java]     lastIdentifierCall = call__ a()
     [java]     Resolving +
     [java]       as +
     [java]       from Int
     [java]     lastIdentifierCall = call__ (call__ a()).+()
     [java]     checking for function...
     [java]     Next is a function +
     [java]     with parameters Int.
     [java]   lastIdentifier +
     [java]   2. child UnresolvedInstruction('b')
     [java]     Parameter check
     [java] parameter b  from function (( -> UnresolvedSignature(this, unresolved)), Int, Int)
     [java] b (Int) void
     [java]   b.this (b) -{ this }- b
     [java] parameter b  from function (( -> UnresolvedSignature(this, unresolved)), Int, Int)
     [java] b (Int) void
     [java]   b.this (b) -{ this }- b
     [java] parameter b  from function (( -> UnresolvedSignature(this, unresolved)), Int, Int)
     [java] b (Int) void
     [java]   b.this (b) -{ this }- b
     [java] parameter b  from function (( -> UnresolvedSignature(this, unresolved)), Int, Int)
     [java] b (Int) void
     [java]   b.this (b) -{ this }- b
     [java]     Resolving b
     [java]       as b [: Int]
     [java]       from function
     [java] b (Int) void
     [java]   b.this (b) -{ this }- b
     [java]     Checking parameter Int as #0 on +.
     [java]     call__ b() is parameter.
     [java]     Function call to + complete.
     [java]     Next is a function Int
     [java]     with parameters _{int}_.
     [java]     lastIdentifierCall = call__ (call__ a()).+(call__ b())
     [java] adding call__ (call__ a()).+(call__ b()) to result.
     [java] ----/Result: call__ (call__ a()).+(call__ b())
     [java]                                                       Solved to call__ (call__ a()).+(call__ b())
     [java]                                                     Instruction List[List[UnresolvedInstruction('while'), lambda__ ( -> UnresolvedSignature(Boolean, unresolved)), lambda__ ( -> UnresolvedSignature(void, unresolved))], List[UnresolvedInstruction('while'), lambda__ ( -> UnresolvedSignature(Boolean, unresolved)), lambda__ ( -> UnresolvedSignature(void, unresolved))], lambda__ (UnresolvedSignature(Int, unresolved) UnresolvedSignature(Int, unresolved) -> UnresolvedSignature(Int, unresolved))] in main needs solving.
     [java] /----Solving List[List[UnresolvedInstruction('while'), lambda__ ( -> UnresolvedSignature(Boolean, unresolved)), lambda__ ( -> UnresolvedSignature(void, unresolved))], List[UnresolvedInstruction('while'), lambda__ ( -> UnresolvedSignature(Boolean, unresolved)), lambda__ ( -> UnresolvedSignature(void, unresolved))], lambda__ (UnresolvedSignature(Int, unresolved) UnresolvedSignature(Int, unresolved) -> UnresolvedSignature(Int, unresolved))]
     [java] /----Solving List[UnresolvedInstruction('while'), lambda__ ( -> UnresolvedSignature(Boolean, unresolved)), lambda__ ( -> UnresolvedSignature(void, unresolved))]
     [java]   lastIdentifier null
     [java]   0. child UnresolvedInstruction('while')
     [java]     Lookup check
     [java]     lastIdentifierCall = null
     [java]     while found in current scope, setting to while
     [java]     lastIdentifierCall = call__ while()
     [java]     checking for function...
     [java]     Next is a function while
     [java]     with parameters ( -> Boolean), ( -> void).
     [java]                                                           #####Solving LambdaInstruction lambda__ ( -> UnresolvedSignature(Boolean, unresolved))                                                          Checking Signature ( -> UnresolvedSignature(Boolean, unresolved)) in main...                                                           already resolved.
     [java]                                                             Checking Signature UnresolvedSignature(Boolean, unresolved) in ( -> UnresolvedSignature(Boolean, unresolved))...                                                             resolved to Boolean.
     [java]                                                           ( -> Boolean)resolved to ( -> Boolean)
     [java]                                                           Instruction List[UnresolvedInstruction('i'), UnresolvedInstruction('<'), call__ UnresolvedType(Int, unresolved)(-{ 5 }- Int)] in ( -> Boolean) needs solving.
     [java] /----Solving List[UnresolvedInstruction('i'), UnresolvedInstruction('<'), call__ UnresolvedType(Int, unresolved)(-{ 5 }- Int)]
     [java]   lastIdentifier null
     [java]   0. child UnresolvedInstruction('i')
     [java]     Lookup check
     [java]     lastIdentifierCall = null
     [java]     i found in current scope, setting to i
     [java]     lastIdentifierCall = call__ i()
     [java]     checking for function...
     [java]     Next is not a function.
     [java]   lastIdentifier i
     [java]   1. child UnresolvedInstruction('<')
     [java]     Lookup check
     [java]     lastIdentifierCall = call__ i()
     [java]     Resolving <
     [java]       as <
     [java]       from Int
     [java]     lastIdentifierCall = call__ (call__ i()).<()
     [java]     checking for function...
     [java]     Next is a function <
     [java]     with parameters Int.
     [java]                                                                 Checking Signature UnresolvedType(Int, unresolved) in ( -> Boolean)...                                                                 resolved to Int.
     [java]   lastIdentifier <
     [java]   2. child call__ Int(-{ 5 }- Int)
     [java]     Parameter check
     [java]     Checking parameter Int as #0 on <.
     [java]     call__ Int(-{ 5 }- Int) is parameter.
     [java]     Function call to < complete.
     [java]     Next is a function Boolean
     [java]     with parameters _{boolean}_.
     [java]     lastIdentifierCall = call__ (call__ i()).<(call__ Int(-{ 5 }- Int))
     [java] adding call__ (call__ i()).<(call__ Int(-{ 5 }- Int)) to result.
     [java] ----/Result: call__ (call__ i()).<(call__ Int(-{ 5 }- Int))
     [java]                                                             Solved to call__ (call__ i()).<(call__ Int(-{ 5 }- Int))
     [java]   lastIdentifier while
     [java]   1. child lambda__ ( -> Boolean)
     [java]     Parameter check
     [java]     Checking parameter ( -> Boolean) as #0 on while.
     [java]     lambda__ ( -> Boolean) is parameter.
     [java]                                                             #####Solving LambdaInstruction lambda__ ( -> UnresolvedSignature(void, unresolved))                                                            Checking Signature ( -> UnresolvedSignature(void, unresolved)) in main...                                                             already resolved.
     [java]                                                               Checking Signature UnresolvedSignature(void, unresolved) in ( -> UnresolvedSignature(void, unresolved))...                                                               resolved to void.
     [java]                                                             ( -> void)resolved to ( -> void)
     [java]                                                             Instruction List[List[call__ UnresolvedType(String, unresolved)(-{ "bla" }- String), UnresolvedInstruction('println')], List[UnresolvedInstruction('i'), UnresolvedInstruction('++')]] in ( -> void) needs solving.
     [java] /----Solving List[List[call__ UnresolvedType(String, unresolved)(-{ "bla" }- String), UnresolvedInstruction('println')], List[UnresolvedInstruction('i'), UnresolvedInstruction('++')]]
     [java] /----Solving List[call__ UnresolvedType(String, unresolved)(-{ "bla" }- String), UnresolvedInstruction('println')]
     [java]                                                                     Checking Signature UnresolvedType(String, unresolved) in ( -> void)...                                                                     resolved to String.
     [java]   lastIdentifier null
     [java]   0. child call__ String(-{ "bla" }- String)
     [java]     Lookup check
     [java]     checking for function...
     [java]     Next is a function String
     [java]     with parameters _{java.lang.String}_.
     [java]   lastIdentifier String
     [java]   1. child UnresolvedInstruction('println')
     [java]     Parameter check
     [java]     couldn't resolve UnresolvedInstruction('println')
     [java]       in scope ( -> void)
     [java]     Parametercheck failed, backtracking to 1...
     [java]   lastIdentifier String
     [java]   1. child UnresolvedInstruction('println')
     [java]     Lookup check
     [java]     lastIdentifierCall = call__ String(-{ "bla" }- String)
     [java]     Resolving println
     [java]       as println
     [java]       from String
     [java]     lastIdentifierCall = call__ (call__ String(-{ "bla" }- String)).println()
     [java]     checking for function...
     [java]     Next is a function with no parameters.
     [java] adding call__ (call__ String(-{ "bla" }- String)).println() to result.
     [java] ----/Result: call__ (call__ String(-{ "bla" }- String)).println()
     [java]   lastIdentifier null
     [java]   0. child call__ (call__ String(-{ "bla" }- String)).println()
     [java]     Lookup check
     [java]     checking for function...
     [java]     Next is a function with no parameters.
     [java] /----Solving List[UnresolvedInstruction('i'), UnresolvedInstruction('++')]
     [java]   lastIdentifier null
     [java]   0. child UnresolvedInstruction('i')
     [java]     Lookup check
     [java]     lastIdentifierCall = null
     [java]     i found in current scope, setting to i
     [java]     lastIdentifierCall = call__ i()
     [java]     checking for function...
     [java]     Next is not a function.
     [java]   lastIdentifier i
     [java]   1. child UnresolvedInstruction('++')
     [java]     Lookup check
     [java]     lastIdentifierCall = call__ i()
     [java]     Resolving ++
     [java]       as ++
     [java]       from Int
     [java]     lastIdentifierCall = call__ (call__ i()).++()
     [java]     checking for function...
     [java]     Next is a function with no parameters.
     [java] adding call__ (call__ i()).++() to result.
     [java] ----/Result: call__ (call__ i()).++()
     [java]   lastIdentifier void
     [java]   1. child call__ (call__ i()).++()
     [java]     Lookup check
     [java]     call__ (call__ String(-{ "bla" }- String)).println() in single statement list
     [java] adding call__ (call__ i()).++() to result.
     [java] ----/Result: List[call__ (call__ String(-{ "bla" }- String)).println(), call__ (call__ i()).++()]
     [java]                                                                   Solved to List[call__ (call__ String(-{ "bla" }- String)).println(), call__ (call__ i()).++()]
     [java]   lastIdentifier while
     [java]   2. child lambda__ ( -> void)
     [java]     Parameter check
     [java]     Checking parameter ( -> void) as #1 on while.
     [java]     lambda__ ( -> void) is parameter.
     [java]     Function call to while complete.
     [java]     Next is a function with no parameters.
     [java]     lastIdentifierCall = call__ while(lambda__ ( -> Boolean), lambda__ ( -> void))
     [java] adding call__ while(lambda__ ( -> Boolean), lambda__ ( -> void)) to result.
     [java] ----/Result: call__ while(lambda__ ( -> Boolean), lambda__ ( -> void))
     [java]   lastIdentifier null
     [java]   0. child call__ while(lambda__ ( -> Boolean), lambda__ ( -> void))
     [java]     Lookup check
     [java]     checking for function...
     [java]     Next is a function with no parameters.
     [java] /----Solving List[UnresolvedInstruction('while'), lambda__ ( -> UnresolvedSignature(Boolean, unresolved)), lambda__ ( -> UnresolvedSignature(void, unresolved))]
     [java]   lastIdentifier null
     [java]   0. child UnresolvedInstruction('while')
     [java]     Lookup check
     [java]     lastIdentifierCall = null
     [java]     while found in current scope, setting to while
     [java]     lastIdentifierCall = call__ while()
     [java]     checking for function...
     [java]     Next is a function while
     [java]     with parameters ( -> Boolean), ( -> void).
     [java]                                                                     #####Solving LambdaInstruction lambda__ ( -> UnresolvedSignature(Boolean, unresolved))                                                                    Checking Signature ( -> UnresolvedSignature(Boolean, unresolved)) in main...                                                                     already resolved.
     [java]                                                                       Checking Signature UnresolvedSignature(Boolean, unresolved) in ( -> UnresolvedSignature(Boolean, unresolved))...                                                                       resolved to Boolean.
     [java]                                                                     ( -> Boolean)resolved to ( -> Boolean)
     [java]                                                                     Instruction List[UnresolvedInstruction('i'), UnresolvedInstruction('<'), UnresolvedInstruction('param')] in ( -> Boolean) needs solving.
     [java] /----Solving List[UnresolvedInstruction('i'), UnresolvedInstruction('<'), UnresolvedInstruction('param')]
     [java]   lastIdentifier null
     [java]   0. child UnresolvedInstruction('i')
     [java]     Lookup check
     [java]     lastIdentifierCall = null
     [java]     i found in current scope, setting to i
     [java]     lastIdentifierCall = call__ i()
     [java]     checking for function...
     [java]     Next is not a function.
     [java]   lastIdentifier i
     [java]   1. child UnresolvedInstruction('<')
     [java]     Lookup check
     [java]     lastIdentifierCall = call__ i()
     [java]     Resolving <
     [java]       as <
     [java]       from Int
     [java]     lastIdentifierCall = call__ (call__ i()).<()
     [java]     checking for function...
     [java]     Next is a function <
     [java]     with parameters Int.
     [java]   lastIdentifier <
     [java]   2. child UnresolvedInstruction('param')
     [java]     Parameter check
     [java] parameter param  from (UnresolvedSignature(Int, unresolved) -> (Int Int -> Int)) (( -> UnresolvedSignature(void, unresolved)), UnresolvedSignature(Int, unresolved))
     [java] param (UnresolvedSignature(Int, unresolved)) void
     [java]   param.this (param) -{ this }- param
     [java] parameter param  from (UnresolvedSignature(Int, unresolved) -> (Int Int -> Int)) (( -> UnresolvedSignature(void, unresolved)), UnresolvedSignature(Int, unresolved))
     [java] param (UnresolvedSignature(Int, unresolved)) void
     [java]   param.this (param) -{ this }- param
     [java] parameter param  from (UnresolvedSignature(Int, unresolved) -> (Int Int -> Int)) (( -> UnresolvedSignature(void, unresolved)), UnresolvedSignature(Int, unresolved))
     [java] param (UnresolvedSignature(Int, unresolved)) void
     [java]   param.this (param) -{ this }- param
     [java] parameter param  from (UnresolvedSignature(Int, unresolved) -> (Int Int -> Int)) (( -> UnresolvedSignature(void, unresolved)), UnresolvedSignature(Int, unresolved))
     [java] param (UnresolvedSignature(Int, unresolved)) void
     [java]   param.this (param) -{ this }- param
     [java]     Resolving param
     [java]       as param [: UnresolvedSignature(Int, unresolved)]
     [java]       from ( -> Boolean)
     [java] param (UnresolvedSignature(Int, unresolved)) void
     [java]   param.this (param) -{ this }- param
     [java]     Checking parameter UnresolvedSignature(Int, unresolved) as #0 on <.
     [java] de.haukerehfeld.hlisp.semantics.UnresolvedTypeException: Int is unresolved.
     [java] 	at de.haukerehfeld.hlisp.semantics.UnresolvedSignature.resolvedOrException(UnresolvedSignature.java:50)
     [java] 	at de.haukerehfeld.hlisp.semantics.UnresolvedSignature.getParameterTypes(UnresolvedSignature.java:60)
     [java] 	at de.haukerehfeld.hlisp.semantics.AnonymousSignature.isCompatible(AnonymousSignature.java:76)
     [java] 	at de.haukerehfeld.hlisp.semantics.AnonymousType.isCompatible(AnonymousType.java:162)
     [java] 	at de.haukerehfeld.hlisp.semantics.ListInstructionResolver$ParameterSolver.checkParameter(ListInstructionResolver.java:196)
     [java] 	at de.haukerehfeld.hlisp.semantics.ListInstructionResolver$ParameterSolver.solve(ListInstructionResolver.java:146)
     [java] 	at de.haukerehfeld.hlisp.semantics.ListInstructionResolver.solve(ListInstructionResolver.java:315)
     [java] 	at de.haukerehfeld.hlisp.semantics.Resolver.solve(Resolver.java:211)
     [java] 	at de.haukerehfeld.hlisp.semantics.Resolver.solve(Resolver.java:161)
     [java] 	at de.haukerehfeld.hlisp.semantics.Resolver.solveInstructions(Resolver.java:140)
     [java] 	at de.haukerehfeld.hlisp.semantics.Resolver.solve(Resolver.java:186)
     [java] 	at de.haukerehfeld.hlisp.semantics.ListInstructionResolver.solve(ListInstructionResolver.java:295)
     [java] 	at de.haukerehfeld.hlisp.semantics.Resolver.solve(Resolver.java:211)
     [java] 	at de.haukerehfeld.hlisp.semantics.Resolver.solve(Resolver.java:161)
     [java] 	at de.haukerehfeld.hlisp.semantics.ListInstructionResolver.solve(ListInstructionResolver.java:295)
     [java] 	at de.haukerehfeld.hlisp.semantics.Resolver.solve(Resolver.java:211)
     [java] 	at de.haukerehfeld.hlisp.semantics.Resolver.solve(Resolver.java:161)
     [java] 	at de.haukerehfeld.hlisp.semantics.Resolver.solveInstructions(Resolver.java:140)
     [java] 	at de.haukerehfeld.hlisp.semantics.Resolver.solveInstructions(Resolver.java:152)
     [java] 	at de.haukerehfeld.hlisp.semantics.Resolver.solveInstructions(Resolver.java:152)
     [java] 	at de.haukerehfeld.hlisp.semantics.Resolver.solve(Resolver.java:42)
     [java] 	at de.haukerehfeld.hlisp.Lisp.run(Lisp.java:44)
     [java] 	at de.haukerehfeld.hlisp.Lisp.main(Lisp.java:14)
    [javac] Compiling 1 source file to V:\Programming\lisp\bin
    [javac] V:\Programming\lisp\gen\de\haukerehfeld\hlisp\Root.java:492: ')' expected
    [javac]         }
    [javac]          ^
    [javac] V:\Programming\lisp\gen\de\haukerehfeld\hlisp\Root.java:493: not a statement
    [javac]         /* lambda__ ( -> void) */new /* ( -> void) */Function<_hlisp_reserved_void>() {
    [javac]                                                              ^
    [javac] V:\Programming\lisp\gen\de\haukerehfeld\hlisp\Root.java:493: ';' expected
    [javac]         /* lambda__ ( -> void) */new /* ( -> void) */Function<_hlisp_reserved_void>() {
    [javac]                                                                                    ^
    [javac] V:\Programming\lisp\gen\de\haukerehfeld\hlisp\Root.java:495: illegal start of expression
    [javac]         )._hlisp_run();
    [javac]         ^
    [javac] V:\Programming\lisp\gen\de\haukerehfeld\hlisp\Root.java:495: illegal start of expression
    [javac]         )._hlisp_run();
    [javac]          ^
    [javac] V:\Programming\lisp\gen\de\haukerehfeld\hlisp\Root.java:495: ';' expected
    [javac]         )._hlisp_run();
    [javac]                     ^
    [javac] 6 errors
